{"ast":null,"code":"// Communicate with the back-end Server\n\nimport { PRODUCTS_URL, UPLOAD_URL } from \"../constants\";\nimport { apiSlice } from './apiSlice';\n\n// Inject endpoint to main apiSlice\nexport const productsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // ----------------------------------------------------------\n    // Public\n    // ----------------------------------------------------------\n    // Get all the products\n    getProducts: builder.query({\n      query: ({\n        keyword,\n        pageNumber\n      }) => ({\n        // Search and Pagination functionality\n        url: PRODUCTS_URL,\n        params: {\n          keyword,\n          pageNumber\n        }\n      }),\n      providesTags: ['Products'],\n      // instead of having to refresh the page or refetching the data using the refetch\n      keepUnusedDataFor: 5\n    }),\n    // Get category products (fedora | bowler | cowboy)\n    getCategoryProducts: builder.query({\n      query: ({\n        category,\n        pageNumber\n      }) => ({\n        // Only Pagination functionality\n        url: `${PRODUCTS_URL}/category/${category}`,\n        params: {\n          category,\n          pageNumber\n        }\n      }),\n      keepUnusedDataFor: 5\n    }),\n    // Get a single product\n    getProductDetails: builder.query({\n      query: productId => ({\n        url: `${PRODUCTS_URL}/${productId}`\n      }),\n      keepUnusedDataFor: 5\n    }),\n    // Get top 3 products\n    getTopProducts: builder.query({\n      query: () => ({\n        url: `${PRODUCTS_URL}/top`\n      }),\n      keepUnusedDataFor: 5\n    }),\n    // ----------------------------------------------------------\n    // Private\n    // ----------------------------------------------------------\n    // Create product review\n    createReview: builder.mutation({\n      query: data => ({\n        url: `${PRODUCTS_URL}/${data.productId}/reviews`,\n        method: 'POST',\n        body: data\n      }),\n      invalidatesTags: ['Product'] // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\n    }),\n    // ----------------------------------------------------------\n    // ADMIN\n    // ----------------------------------------------------------\n    // Create a product\n    createProduct: builder.mutation({\n      query: () => ({\n        // Even if it is a post request, we don't pass any data because we create it with sample data directly in the backend endpoint and later on we will edit it\n        url: PRODUCTS_URL,\n        method: 'POST'\n      }),\n      invalidatesTags: ['Product'] // it is stopped from beeing cached. So we have fresh data. We get read of any cached data\n    }),\n    // Update a product\n    updateProduct: builder.mutation({\n      query: data => ({\n        url: `${PRODUCTS_URL}/${data._id}`,\n        method: 'PUT',\n        body: data\n      }),\n      invalidatesTags: ['Products'] // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\n    }),\n    // Upload product Image\n    uploadProductImage: builder.mutation({\n      query: data => ({\n        url: UPLOAD_URL,\n        method: 'POST',\n        body: data\n      })\n    }),\n    // Delete product\n    deleteProduct: builder.mutation({\n      query: productId => ({\n        url: `${PRODUCTS_URL}/${productId}`,\n        method: 'DELETE'\n      })\n    })\n  })\n});\nexport const {\n  useGetProductsQuery,\n  useGetProductDetailsQuery,\n  useCreateProductMutation,\n  useUpdateProductMutation,\n  useUploadProductImageMutation,\n  useDeleteProductMutation,\n  useCreateReviewMutation,\n  useGetTopProductsQuery,\n  useGetCategoryProductsQuery\n} = productsApiSlice;","map":{"version":3,"names":["PRODUCTS_URL","UPLOAD_URL","apiSlice","productsApiSlice","injectEndpoints","endpoints","builder","getProducts","query","keyword","pageNumber","url","params","providesTags","keepUnusedDataFor","getCategoryProducts","category","getProductDetails","productId","getTopProducts","createReview","mutation","data","method","body","invalidatesTags","createProduct","updateProduct","_id","uploadProductImage","deleteProduct","useGetProductsQuery","useGetProductDetailsQuery","useCreateProductMutation","useUpdateProductMutation","useUploadProductImageMutation","useDeleteProductMutation","useCreateReviewMutation","useGetTopProductsQuery","useGetCategoryProductsQuery"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/slices/productsApiSlice.js"],"sourcesContent":["// Communicate with the back-end Server\r\n\r\nimport { PRODUCTS_URL, UPLOAD_URL } from \"../constants\";\r\nimport { apiSlice } from './apiSlice';\r\n\r\n// Inject endpoint to main apiSlice\r\nexport const productsApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        // ----------------------------------------------------------\r\n        // Public\r\n        // ----------------------------------------------------------\r\n        // Get all the products\r\n        getProducts: builder.query({\r\n            query: ({keyword, pageNumber}) => ({  // Search and Pagination functionality\r\n                url: PRODUCTS_URL,\r\n                params: {\r\n                    keyword,\r\n                    pageNumber,\r\n                },\r\n            }),\r\n            providesTags: ['Products'], // instead of having to refresh the page or refetching the data using the refetch\r\n            keepUnusedDataFor: 5\r\n        }),\r\n        // Get category products (fedora | bowler | cowboy)\r\n        getCategoryProducts: builder.query({\r\n            query: ({category, pageNumber}) => ({ // Only Pagination functionality\r\n                url: `${PRODUCTS_URL}/category/${category}`,\r\n                params: {\r\n                     category,\r\n                     pageNumber,\r\n                },\r\n            }),\r\n            keepUnusedDataFor: 5\r\n        }),\r\n        // Get a single product\r\n        getProductDetails: builder.query({\r\n            query: (productId) => ({\r\n                url: `${PRODUCTS_URL}/${productId}`,\r\n            }),\r\n            keepUnusedDataFor: 5\r\n        }),\r\n        // Get top 3 products\r\n        getTopProducts: builder.query({\r\n            query: () => ({\r\n                url: `${PRODUCTS_URL}/top`,\r\n            }),\r\n            keepUnusedDataFor: 5\r\n        }),\r\n        // ----------------------------------------------------------\r\n        // Private\r\n        // ----------------------------------------------------------\r\n        // Create product review\r\n        createReview: builder.mutation({\r\n            query: (data) => ({\r\n                url: `${PRODUCTS_URL}/${data.productId}/reviews`,\r\n                method: 'POST',\r\n                body: data\r\n            }),\r\n            invalidatesTags: ['Product'], // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\r\n        }),\r\n        // ----------------------------------------------------------\r\n        // ADMIN\r\n        // ----------------------------------------------------------\r\n        // Create a product\r\n        createProduct: builder.mutation({\r\n            query: () => ({                 // Even if it is a post request, we don't pass any data because we create it with sample data directly in the backend endpoint and later on we will edit it\r\n                url: PRODUCTS_URL,\r\n                method: 'POST'\r\n            }),\r\n            invalidatesTags: ['Product'],   // it is stopped from beeing cached. So we have fresh data. We get read of any cached data\r\n        }),\r\n        // Update a product\r\n        updateProduct: builder.mutation({\r\n            query: (data) => ({\r\n                url: `${PRODUCTS_URL}/${data._id}`,\r\n                method: 'PUT',\r\n                body: data,\r\n            }),\r\n            invalidatesTags: ['Products'],   // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\r\n        }),\r\n        // Upload product Image\r\n        uploadProductImage: builder.mutation({\r\n            query: (data) => ({\r\n                url: UPLOAD_URL,\r\n                method: 'POST',\r\n                body: data\r\n            })\r\n        }),\r\n        // Delete product\r\n        deleteProduct: builder.mutation({\r\n            query: (productId) => ({\r\n                url: `${PRODUCTS_URL}/${productId}`,\r\n                method: 'DELETE'\r\n            })\r\n        }),\r\n    }),\r\n});\r\n\r\nexport const {\r\n    useGetProductsQuery,\r\n    useGetProductDetailsQuery,\r\n    useCreateProductMutation,\r\n    useUpdateProductMutation,\r\n    useUploadProductImageMutation,\r\n    useDeleteProductMutation,\r\n    useCreateReviewMutation,\r\n    useGetTopProductsQuery,\r\n    useGetCategoryProductsQuery\r\n} = productsApiSlice;\r\n"],"mappings":"AAAA;;AAEA,SAASA,YAAY,EAAEC,UAAU,QAAQ,cAAc;AACvD,SAASC,QAAQ,QAAQ,YAAY;;AAErC;AACA,OAAO,MAAMC,gBAAgB,GAAGD,QAAQ,CAACE,eAAe,CAAC;EACrDC,SAAS,EAAGC,OAAO,KAAM;IACrB;IACA;IACA;IACA;IACAC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;MACvBA,KAAK,EAAEA,CAAC;QAACC,OAAO;QAAEC;MAAU,CAAC,MAAM;QAAG;QAClCC,GAAG,EAAEX,YAAY;QACjBY,MAAM,EAAE;UACJH,OAAO;UACPC;QACJ;MACJ,CAAC,CAAC;MACFG,YAAY,EAAE,CAAC,UAAU,CAAC;MAAE;MAC5BC,iBAAiB,EAAE;IACvB,CAAC,CAAC;IACF;IACAC,mBAAmB,EAAET,OAAO,CAACE,KAAK,CAAC;MAC/BA,KAAK,EAAEA,CAAC;QAACQ,QAAQ;QAAEN;MAAU,CAAC,MAAM;QAAE;QAClCC,GAAG,EAAG,GAAEX,YAAa,aAAYgB,QAAS,EAAC;QAC3CJ,MAAM,EAAE;UACHI,QAAQ;UACRN;QACL;MACJ,CAAC,CAAC;MACFI,iBAAiB,EAAE;IACvB,CAAC,CAAC;IACF;IACAG,iBAAiB,EAAEX,OAAO,CAACE,KAAK,CAAC;MAC7BA,KAAK,EAAGU,SAAS,KAAM;QACnBP,GAAG,EAAG,GAAEX,YAAa,IAAGkB,SAAU;MACtC,CAAC,CAAC;MACFJ,iBAAiB,EAAE;IACvB,CAAC,CAAC;IACF;IACAK,cAAc,EAAEb,OAAO,CAACE,KAAK,CAAC;MAC1BA,KAAK,EAAEA,CAAA,MAAO;QACVG,GAAG,EAAG,GAAEX,YAAa;MACzB,CAAC,CAAC;MACFc,iBAAiB,EAAE;IACvB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACAM,YAAY,EAAEd,OAAO,CAACe,QAAQ,CAAC;MAC3Bb,KAAK,EAAGc,IAAI,KAAM;QACdX,GAAG,EAAG,GAAEX,YAAa,IAAGsB,IAAI,CAACJ,SAAU,UAAS;QAChDK,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEF;MACV,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,SAAS,CAAC,CAAE;IAClC,CAAC,CAAC;IACF;IACA;IACA;IACA;IACAC,aAAa,EAAEpB,OAAO,CAACe,QAAQ,CAAC;MAC5Bb,KAAK,EAAEA,CAAA,MAAO;QAAkB;QAC5BG,GAAG,EAAEX,YAAY;QACjBuB,MAAM,EAAE;MACZ,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,SAAS,CAAC,CAAI;IACpC,CAAC,CAAC;IACF;IACAE,aAAa,EAAErB,OAAO,CAACe,QAAQ,CAAC;MAC5Bb,KAAK,EAAGc,IAAI,KAAM;QACdX,GAAG,EAAG,GAAEX,YAAa,IAAGsB,IAAI,CAACM,GAAI,EAAC;QAClCL,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEF;MACV,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,UAAU,CAAC,CAAI;IACrC,CAAC,CAAC;IACF;IACAI,kBAAkB,EAAEvB,OAAO,CAACe,QAAQ,CAAC;MACjCb,KAAK,EAAGc,IAAI,KAAM;QACdX,GAAG,EAAEV,UAAU;QACfsB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEF;MACV,CAAC;IACL,CAAC,CAAC;IACF;IACAQ,aAAa,EAAExB,OAAO,CAACe,QAAQ,CAAC;MAC5Bb,KAAK,EAAGU,SAAS,KAAM;QACnBP,GAAG,EAAG,GAAEX,YAAa,IAAGkB,SAAU,EAAC;QACnCK,MAAM,EAAE;MACZ,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTQ,mBAAmB;EACnBC,yBAAyB;EACzBC,wBAAwB;EACxBC,wBAAwB;EACxBC,6BAA6B;EAC7BC,wBAAwB;EACxBC,uBAAuB;EACvBC,sBAAsB;EACtBC;AACJ,CAAC,GAAGpC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}