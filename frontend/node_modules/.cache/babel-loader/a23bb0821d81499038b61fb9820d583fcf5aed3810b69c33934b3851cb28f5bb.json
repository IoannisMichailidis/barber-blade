{"ast":null,"code":"// src/query/react/index.ts\nimport { coreModule, buildCreateApi } from \"@reduxjs/toolkit/query\";\n\n// src/query/react/module.ts\nimport { formatProdErrorMessage as _formatProdErrorMessage3 } from \"@reduxjs/toolkit\";\n\n// src/query/react/buildHooks.ts\nimport { formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport { useCallback, useDebugValue, useEffect as useEffect3, useLayoutEffect, useMemo as useMemo2, useRef as useRef3, useState } from \"react\";\nimport { QueryStatus, skipToken } from \"@reduxjs/toolkit/query\";\nimport { shallowEqual as shallowEqual2 } from \"react-redux\";\n\n// src/query/react/useSerializedStableValue.ts\nimport { useEffect, useRef, useMemo } from \"react\";\nfunction useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {\n  const incoming = useMemo(() => ({\n    queryArgs,\n    serialized: typeof queryArgs == \"object\" ? serialize({\n      queryArgs,\n      endpointDefinition,\n      endpointName\n    }) : queryArgs\n  }), [queryArgs, serialize, endpointDefinition, endpointName]);\n  const cache2 = useRef(incoming);\n  useEffect(() => {\n    if (cache2.current.serialized !== incoming.serialized) {\n      cache2.current = incoming;\n    }\n  }, [incoming]);\n  return cache2.current.serialized === incoming.serialized ? cache2.current.queryArgs : queryArgs;\n}\n\n// src/query/react/constants.ts\nvar UNINITIALIZED_VALUE = Symbol();\n\n// src/query/react/useShallowStableValue.ts\nimport { useEffect as useEffect2, useRef as useRef2 } from \"react\";\nimport { shallowEqual } from \"react-redux\";\nfunction useShallowStableValue(value) {\n  const cache2 = useRef2(value);\n  useEffect2(() => {\n    if (!shallowEqual(cache2.current, value)) {\n      cache2.current = value;\n    }\n  }, [value]);\n  return shallowEqual(cache2.current, value) ? cache2.current : value;\n}\n\n// src/query/core/rtkImports.ts\nimport { createAction, createSlice, createSelector, createAsyncThunk, combineReducers, createNextState, isAnyOf, isAllOf, isAction, isPending, isRejected, isFulfilled, isRejectedWithValue, isAsyncThunkAction, prepareAutoBatched, SHOULD_AUTOBATCH, isPlainObject, nanoid } from \"@reduxjs/toolkit\";\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = ({\n  endpointName,\n  queryArgs\n}) => {\n  let serialized = \"\";\n  const cached = cache?.get(queryArgs);\n  if (typeof cached === \"string\") {\n    serialized = cached;\n  } else {\n    const stringified = JSON.stringify(queryArgs, (key, value) => isPlainObject(value) ? Object.keys(value).sort().reduce((acc, key2) => {\n      acc[key2] = value[key2];\n      return acc;\n    }, {}) : value);\n    if (isPlainObject(queryArgs)) {\n      cache?.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return `${endpointName}(${serialized})`;\n};\n\n// src/query/react/buildHooks.ts\nvar useIsomorphicLayoutEffect = typeof window !== \"undefined\" && !!window.document && !!window.document.createElement ? useLayoutEffect : useEffect3;\nvar noPendingQueryStateSelector = selected => {\n  if (selected.isUninitialized) {\n    return {\n      ...selected,\n      isUninitialized: false,\n      isFetching: true,\n      isLoading: selected.data !== void 0 ? false : true,\n      status: QueryStatus.pending\n    };\n  }\n  return selected;\n};\nfunction buildHooks({\n  api,\n  moduleOptions: {\n    batch,\n    hooks: {\n      useDispatch,\n      useSelector,\n      useStore\n    },\n    unstable__sideEffectsInRender,\n    createSelector: createSelector2\n  },\n  serializeQueryArgs,\n  context\n}) {\n  const usePossiblyImmediateEffect = unstable__sideEffectsInRender ? cb => cb() : useEffect3;\n  return {\n    buildQueryHooks,\n    buildMutationHook,\n    usePrefetch\n  };\n  function queryStatePreSelector(currentState, lastResult, queryArgs) {\n    if (lastResult?.endpointName && currentState.isUninitialized) {\n      const {\n        endpointName\n      } = lastResult;\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      if (serializeQueryArgs({\n        queryArgs: lastResult.originalArgs,\n        endpointDefinition,\n        endpointName\n      }) === serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      })) lastResult = void 0;\n    }\n    let data = currentState.isSuccess ? currentState.data : lastResult?.data;\n    if (data === void 0) data = currentState.data;\n    const hasData = data !== void 0;\n    const isFetching = currentState.isLoading;\n    const isLoading = !hasData && isFetching;\n    const isSuccess = currentState.isSuccess || isFetching && hasData;\n    return {\n      ...currentState,\n      data,\n      currentData: currentState.data,\n      isFetching,\n      isLoading,\n      isSuccess\n    };\n  }\n  function usePrefetch(endpointName, defaultOptions) {\n    const dispatch = useDispatch();\n    const stableDefaultOptions = useShallowStableValue(defaultOptions);\n    return useCallback((arg, options) => dispatch(api.util.prefetch(endpointName, arg, {\n      ...stableDefaultOptions,\n      ...options\n    })), [endpointName, dispatch, stableDefaultOptions]);\n  }\n  function buildQueryHooks(name) {\n    const useQuerySubscription = (arg, {\n      refetchOnReconnect,\n      refetchOnFocus,\n      refetchOnMountOrArgChange,\n      skip = false,\n      pollingInterval = 0,\n      skipPollingIfUnfocused = false\n    } = {}) => {\n      const {\n        initiate\n      } = api.endpoints[name];\n      const dispatch = useDispatch();\n      const subscriptionSelectorsRef = useRef3();\n      if (!subscriptionSelectorsRef.current) {\n        const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n        if (process.env.NODE_ENV !== \"production\") {\n          if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(37) : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\n    You must add the middleware for RTK-Query to function correctly!`);\n          }\n        }\n        subscriptionSelectorsRef.current = returnedValue;\n      }\n      const stableArg = useStableQueryArgs(skip ? skipToken : arg,\n      // Even if the user provided a per-endpoint `serializeQueryArgs` with\n      // a consistent return value, _here_ we want to use the default behavior\n      // so we can tell if _anything_ actually changed. Otherwise, we can end up\n      // with a case where the query args did change but the serialization doesn't,\n      // and then we never try to initiate a refetch.\n      defaultSerializeQueryArgs, context.endpointDefinitions[name], name);\n      const stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect,\n        refetchOnFocus,\n        pollingInterval,\n        skipPollingIfUnfocused\n      });\n      const lastRenderHadSubscription = useRef3(false);\n      const promiseRef = useRef3();\n      let {\n        queryCacheKey,\n        requestId\n      } = promiseRef.current || {};\n      let currentRenderHasSubscription = false;\n      if (queryCacheKey && requestId) {\n        currentRenderHasSubscription = subscriptionSelectorsRef.current.isRequestSubscribed(queryCacheKey, requestId);\n      }\n      const subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;\n      usePossiblyImmediateEffect(() => {\n        lastRenderHadSubscription.current = currentRenderHasSubscription;\n      });\n      usePossiblyImmediateEffect(() => {\n        if (subscriptionRemoved) {\n          promiseRef.current = void 0;\n        }\n      }, [subscriptionRemoved]);\n      usePossiblyImmediateEffect(() => {\n        const lastPromise = promiseRef.current;\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"removeMeOnCompilation\") {\n          console.log(subscriptionRemoved);\n        }\n        if (stableArg === skipToken) {\n          lastPromise?.unsubscribe();\n          promiseRef.current = void 0;\n          return;\n        }\n        const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n        if (!lastPromise || lastPromise.arg !== stableArg) {\n          lastPromise?.unsubscribe();\n          const promise = dispatch(initiate(stableArg, {\n            subscriptionOptions: stableSubscriptionOptions,\n            forceRefetch: refetchOnMountOrArgChange\n          }));\n          promiseRef.current = promise;\n        } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [dispatch, initiate, refetchOnMountOrArgChange, stableArg, stableSubscriptionOptions, subscriptionRemoved]);\n      useEffect3(() => {\n        return () => {\n          promiseRef.current?.unsubscribe();\n          promiseRef.current = void 0;\n        };\n      }, []);\n      return useMemo2(() => ({\n        /**\n         * A method to manually refetch data for the query\n         */\n        refetch: () => {\n          if (!promiseRef.current) throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(38) : \"Cannot refetch a query that has not been started yet.\");\n          return promiseRef.current?.refetch();\n        }\n      }), []);\n    };\n    const useLazyQuerySubscription = ({\n      refetchOnReconnect,\n      refetchOnFocus,\n      pollingInterval = 0,\n      skipPollingIfUnfocused = false\n    } = {}) => {\n      const {\n        initiate\n      } = api.endpoints[name];\n      const dispatch = useDispatch();\n      const [arg, setArg] = useState(UNINITIALIZED_VALUE);\n      const promiseRef = useRef3();\n      const stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect,\n        refetchOnFocus,\n        pollingInterval,\n        skipPollingIfUnfocused\n      });\n      usePossiblyImmediateEffect(() => {\n        const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n        if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          promiseRef.current?.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [stableSubscriptionOptions]);\n      const subscriptionOptionsRef = useRef3(stableSubscriptionOptions);\n      usePossiblyImmediateEffect(() => {\n        subscriptionOptionsRef.current = stableSubscriptionOptions;\n      }, [stableSubscriptionOptions]);\n      const trigger = useCallback(function (arg2, preferCacheValue = false) {\n        let promise;\n        batch(() => {\n          promiseRef.current?.unsubscribe();\n          promiseRef.current = promise = dispatch(initiate(arg2, {\n            subscriptionOptions: subscriptionOptionsRef.current,\n            forceRefetch: !preferCacheValue\n          }));\n          setArg(arg2);\n        });\n        return promise;\n      }, [dispatch, initiate]);\n      useEffect3(() => {\n        return () => {\n          promiseRef?.current?.unsubscribe();\n        };\n      }, []);\n      useEffect3(() => {\n        if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\n          trigger(arg, true);\n        }\n      }, [arg, trigger]);\n      return useMemo2(() => [trigger, arg], [trigger, arg]);\n    };\n    const useQueryState = (arg, {\n      skip = false,\n      selectFromResult\n    } = {}) => {\n      const {\n        select\n      } = api.endpoints[name];\n      const stableArg = useStableQueryArgs(skip ? skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);\n      const lastValue = useRef3();\n      const selectDefaultResult = useMemo2(() => createSelector2([select(stableArg), (_, lastResult) => lastResult, _ => stableArg], queryStatePreSelector, {\n        memoizeOptions: {\n          resultEqualityCheck: shallowEqual2\n        }\n      }), [select, stableArg]);\n      const querySelector = useMemo2(() => selectFromResult ? createSelector2([selectDefaultResult], selectFromResult, {\n        devModeChecks: {\n          identityFunctionCheck: \"never\"\n        }\n      }) : selectDefaultResult, [selectDefaultResult, selectFromResult]);\n      const currentState = useSelector(state => querySelector(state, lastValue.current), shallowEqual2);\n      const store = useStore();\n      const newLastValue = selectDefaultResult(store.getState(), lastValue.current);\n      useIsomorphicLayoutEffect(() => {\n        lastValue.current = newLastValue;\n      }, [newLastValue]);\n      return currentState;\n    };\n    return {\n      useQueryState,\n      useQuerySubscription,\n      useLazyQuerySubscription,\n      useLazyQuery(options) {\n        const [trigger, arg] = useLazyQuerySubscription(options);\n        const queryStateResults = useQueryState(arg, {\n          ...options,\n          skip: arg === UNINITIALIZED_VALUE\n        });\n        const info = useMemo2(() => ({\n          lastArg: arg\n        }), [arg]);\n        return useMemo2(() => [trigger, queryStateResults, info], [trigger, queryStateResults, info]);\n      },\n      useQuery(arg, options) {\n        const querySubscriptionResults = useQuerySubscription(arg, options);\n        const queryStateResults = useQueryState(arg, {\n          selectFromResult: arg === skipToken || options?.skip ? void 0 : noPendingQueryStateSelector,\n          ...options\n        });\n        const {\n          data,\n          status,\n          isLoading,\n          isSuccess,\n          isError,\n          error\n        } = queryStateResults;\n        useDebugValue({\n          data,\n          status,\n          isLoading,\n          isSuccess,\n          isError,\n          error\n        });\n        return useMemo2(() => ({\n          ...queryStateResults,\n          ...querySubscriptionResults\n        }), [queryStateResults, querySubscriptionResults]);\n      }\n    };\n  }\n  function buildMutationHook(name) {\n    return ({\n      selectFromResult,\n      fixedCacheKey\n    } = {}) => {\n      const {\n        select,\n        initiate\n      } = api.endpoints[name];\n      const dispatch = useDispatch();\n      const [promise, setPromise] = useState();\n      useEffect3(() => () => {\n        if (!promise?.arg.fixedCacheKey) {\n          promise?.reset();\n        }\n      }, [promise]);\n      const triggerMutation = useCallback(function (arg) {\n        const promise2 = dispatch(initiate(arg, {\n          fixedCacheKey\n        }));\n        setPromise(promise2);\n        return promise2;\n      }, [dispatch, initiate, fixedCacheKey]);\n      const {\n        requestId\n      } = promise || {};\n      const selectDefaultResult = useMemo2(() => select({\n        fixedCacheKey,\n        requestId: promise?.requestId\n      }), [fixedCacheKey, promise, select]);\n      const mutationSelector = useMemo2(() => selectFromResult ? createSelector2([selectDefaultResult], selectFromResult) : selectDefaultResult, [selectFromResult, selectDefaultResult]);\n      const currentState = useSelector(mutationSelector, shallowEqual2);\n      const originalArgs = fixedCacheKey == null ? promise?.arg.originalArgs : void 0;\n      const reset = useCallback(() => {\n        batch(() => {\n          if (promise) {\n            setPromise(void 0);\n          }\n          if (fixedCacheKey) {\n            dispatch(api.internalActions.removeMutationResult({\n              requestId,\n              fixedCacheKey\n            }));\n          }\n        });\n      }, [dispatch, fixedCacheKey, promise, requestId]);\n      const {\n        endpointName,\n        data,\n        status,\n        isLoading,\n        isSuccess,\n        isError,\n        error\n      } = currentState;\n      useDebugValue({\n        endpointName,\n        data,\n        status,\n        isLoading,\n        isSuccess,\n        isError,\n        error\n      });\n      const finalState = useMemo2(() => ({\n        ...currentState,\n        originalArgs,\n        reset\n      }), [currentState, originalArgs, reset]);\n      return useMemo2(() => [triggerMutation, finalState], [triggerMutation, finalState]);\n    };\n  }\n}\n\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n  return e.type === \"query\" /* query */;\n}\nfunction isMutationDefinition(e) {\n  return e.type === \"mutation\" /* mutation */;\n}\n\n// src/query/utils/capitalize.ts\nfunction capitalize(str) {\n  return str.replace(str[0], str[0].toUpperCase());\n}\n\n// src/query/tsHelpers.ts\nfunction safeAssign(target, ...args) {\n  return Object.assign(target, ...args);\n}\n\n// src/query/react/module.ts\nimport { useDispatch as rrUseDispatch, useSelector as rrUseSelector, useStore as rrUseStore, batch as rrBatch } from \"react-redux\";\n\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n  let count = 0;\n  for (const _key in obj) {\n    count++;\n  }\n  return count;\n}\n\n// src/query/react/module.ts\nimport { createSelector as _createSelector } from \"reselect\";\nvar reactHooksModuleName = /* @__PURE__ */Symbol();\nvar reactHooksModule = ({\n  batch = rrBatch,\n  hooks = {\n    useDispatch: rrUseDispatch,\n    useSelector: rrUseSelector,\n    useStore: rrUseStore\n  },\n  createSelector: createSelector2 = _createSelector,\n  unstable__sideEffectsInRender = false,\n  ...rest\n} = {}) => {\n  if (process.env.NODE_ENV !== \"production\") {\n    const hookNames = [\"useDispatch\", \"useSelector\", \"useStore\"];\n    let warned = false;\n    for (const hookName of hookNames) {\n      if (countObjectKeys(rest) > 0) {\n        if (rest[hookName]) {\n          if (!warned) {\n            console.warn(\"As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`\");\n            warned = true;\n          }\n        }\n        hooks[hookName] = rest[hookName];\n      }\n      if (typeof hooks[hookName] !== \"function\") {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(36) : `When using custom hooks for context, all ${hookNames.length} hooks need to be provided: ${hookNames.join(\", \")}.\nHook ${hookName} was either not provided or not a function.`);\n      }\n    }\n  }\n  return {\n    name: reactHooksModuleName,\n    init(api, {\n      serializeQueryArgs\n    }, context) {\n      const anyApi = api;\n      const {\n        buildQueryHooks,\n        buildMutationHook,\n        usePrefetch\n      } = buildHooks({\n        api,\n        moduleOptions: {\n          batch,\n          hooks,\n          unstable__sideEffectsInRender,\n          createSelector: createSelector2\n        },\n        serializeQueryArgs,\n        context\n      });\n      safeAssign(anyApi, {\n        usePrefetch\n      });\n      safeAssign(context, {\n        batch\n      });\n      return {\n        injectEndpoint(endpointName, definition) {\n          if (isQueryDefinition(definition)) {\n            const {\n              useQuery,\n              useLazyQuery,\n              useLazyQuerySubscription,\n              useQueryState,\n              useQuerySubscription\n            } = buildQueryHooks(endpointName);\n            safeAssign(anyApi.endpoints[endpointName], {\n              useQuery,\n              useLazyQuery,\n              useLazyQuerySubscription,\n              useQueryState,\n              useQuerySubscription\n            });\n            api[`use${capitalize(endpointName)}Query`] = useQuery;\n            api[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;\n          } else if (isMutationDefinition(definition)) {\n            const useMutation = buildMutationHook(endpointName);\n            safeAssign(anyApi.endpoints[endpointName], {\n              useMutation\n            });\n            api[`use${capitalize(endpointName)}Mutation`] = useMutation;\n          }\n        }\n      };\n    }\n  };\n};\n\n// src/query/react/index.ts\nexport * from \"@reduxjs/toolkit/query\";\n\n// src/query/react/ApiProvider.tsx\nimport { formatProdErrorMessage as _formatProdErrorMessage4 } from \"@reduxjs/toolkit\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { useContext } from \"react\";\nimport { useEffect as useEffect4 } from \"react\";\nimport React from \"react\";\nimport { Provider, ReactReduxContext } from \"react-redux\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nfunction ApiProvider(props) {\n  const context = props.context || ReactReduxContext;\n  const existingContext = useContext(context);\n  if (existingContext) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(35) : \"Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.\");\n  }\n  const [store] = React.useState(() => configureStore({\n    reducer: {\n      [props.api.reducerPath]: props.api.reducer\n    },\n    middleware: gDM => gDM().concat(props.api.middleware)\n  }));\n  useEffect4(() => props.setupListeners === false ? void 0 : setupListeners(store.dispatch, props.setupListeners), [props.setupListeners, store.dispatch]);\n  return /* @__PURE__ */React.createElement(Provider, {\n    store,\n    context\n  }, props.children);\n}\n\n// src/query/react/index.ts\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule(), reactHooksModule());\nexport { ApiProvider, createApi, reactHooksModule, reactHooksModuleName };","map":{"version":3,"names":["coreModule","buildCreateApi","formatProdErrorMessage","_formatProdErrorMessage3","_formatProdErrorMessage2","_formatProdErrorMessage","useCallback","useDebugValue","useEffect","useEffect3","useLayoutEffect","useMemo","useMemo2","useRef","useRef3","useState","QueryStatus","skipToken","shallowEqual","shallowEqual2","useStableQueryArgs","queryArgs","serialize","endpointDefinition","endpointName","incoming","serialized","cache2","current","UNINITIALIZED_VALUE","Symbol","useEffect2","useRef2","useShallowStableValue","value","createAction","createSlice","createSelector","createAsyncThunk","combineReducers","createNextState","isAnyOf","isAllOf","isAction","isPending","isRejected","isFulfilled","isRejectedWithValue","isAsyncThunkAction","prepareAutoBatched","SHOULD_AUTOBATCH","isPlainObject","nanoid","cache","WeakMap","defaultSerializeQueryArgs","cached","get","stringified","JSON","stringify","key","Object","keys","sort","reduce","acc","key2","set","useIsomorphicLayoutEffect","window","document","createElement","noPendingQueryStateSelector","selected","isUninitialized","isFetching","isLoading","data","status","pending","buildHooks","api","moduleOptions","batch","hooks","useDispatch","useSelector","useStore","unstable__sideEffectsInRender","createSelector2","serializeQueryArgs","context","usePossiblyImmediateEffect","cb","buildQueryHooks","buildMutationHook","usePrefetch","queryStatePreSelector","currentState","lastResult","endpointDefinitions","originalArgs","isSuccess","hasData","currentData","defaultOptions","dispatch","stableDefaultOptions","arg","options","util","prefetch","name","useQuerySubscription","refetchOnReconnect","refetchOnFocus","refetchOnMountOrArgChange","skip","pollingInterval","skipPollingIfUnfocused","initiate","endpoints","subscriptionSelectorsRef","returnedValue","internalActions","internal_getRTKQSubscriptions","process","env","NODE_ENV","type","Error","reducerPath","stableArg","stableSubscriptionOptions","lastRenderHadSubscription","promiseRef","queryCacheKey","requestId","currentRenderHasSubscription","isRequestSubscribed","subscriptionRemoved","lastPromise","console","log","unsubscribe","lastSubscriptionOptions","subscriptionOptions","promise","forceRefetch","updateSubscriptionOptions","refetch","useLazyQuerySubscription","setArg","subscriptionOptionsRef","trigger","arg2","preferCacheValue","useQueryState","selectFromResult","select","lastValue","selectDefaultResult","_","memoizeOptions","resultEqualityCheck","querySelector","devModeChecks","identityFunctionCheck","state","store","newLastValue","getState","useLazyQuery","queryStateResults","info","lastArg","useQuery","querySubscriptionResults","isError","error","fixedCacheKey","setPromise","reset","triggerMutation","promise2","mutationSelector","removeMutationResult","finalState","isQueryDefinition","e","isMutationDefinition","capitalize","str","replace","toUpperCase","safeAssign","target","args","assign","rrUseDispatch","rrUseSelector","rrUseStore","rrBatch","countObjectKeys","obj","count","_key","_createSelector","reactHooksModuleName","reactHooksModule","rest","hookNames","warned","hookName","warn","length","join","init","anyApi","injectEndpoint","definition","useMutation","_formatProdErrorMessage4","configureStore","useContext","useEffect4","React","Provider","ReactReduxContext","setupListeners","ApiProvider","props","existingContext","reducer","middleware","gDM","concat","children","createApi"],"sources":["C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\index.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\module.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\buildHooks.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\useSerializedStableValue.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\constants.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\useShallowStableValue.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\rtkImports.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\defaultSerializeQueryArgs.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\endpointDefinitions.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\capitalize.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\tsHelpers.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\countObjectKeys.ts","C:\\Users\\micha\\Documents\\Portofolio\\barber-blade\\frontend\\node_modules\\@reduxjs\\toolkit\\src\\query\\react\\ApiProvider.tsx"],"sourcesContent":["// This must remain here so that the `mangleErrors.cjs` build script\n// does not have to import this into each source file it rewrites.\nimport { formatProdErrorMessage } from '@reduxjs/toolkit';\nimport { coreModule, buildCreateApi } from '@reduxjs/toolkit/query';\nimport { reactHooksModule, reactHooksModuleName } from './module';\nexport * from '@reduxjs/toolkit/query';\nexport { ApiProvider } from './ApiProvider';\nconst createApi = /* @__PURE__ */buildCreateApi(coreModule(), reactHooksModule());\nexport type { TypedUseQueryHookResult, TypedUseQueryStateResult, TypedUseQuerySubscriptionResult, TypedUseMutationResult } from './buildHooks';\nexport { createApi, reactHooksModule, reactHooksModuleName };","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { MutationHooks, QueryHooks } from './buildHooks';\nimport { buildHooks } from './buildHooks';\nimport { isQueryDefinition, isMutationDefinition } from '../endpointDefinitions';\nimport type { EndpointDefinitions, QueryDefinition, MutationDefinition, QueryArgFrom } from '@reduxjs/toolkit/query';\nimport type { Api, Module } from '../apiTypes';\nimport { capitalize } from '../utils';\nimport { safeAssign } from '../tsHelpers';\nimport type { BaseQueryFn } from '@reduxjs/toolkit/query';\nimport type { HooksWithUniqueNames } from './namedHooks';\nimport { useDispatch as rrUseDispatch, useSelector as rrUseSelector, useStore as rrUseStore, batch as rrBatch } from 'react-redux';\nimport type { QueryKeys } from '../core/apiState';\nimport type { PrefetchOptions } from '../core/module';\nimport { countObjectKeys } from '../utils/countObjectKeys';\nimport { createSelector as _createSelector } from 'reselect';\nexport const reactHooksModuleName = /* @__PURE__ */Symbol();\nexport type ReactHooksModule = typeof reactHooksModuleName;\ndeclare module '@reduxjs/toolkit/query' {\n  export interface ApiModules< // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  BaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ReducerPath extends string, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  TagTypes extends string> {\n    [reactHooksModuleName]: {\n      /**\n       *  Endpoints based on the input endpoints provided to `createApi`, containing `select`, `hooks` and `action matchers`.\n       */\n      endpoints: { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<any, any, any, any, any> ? QueryHooks<Definitions[K]> : Definitions[K] extends MutationDefinition<any, any, any, any, any> ? MutationHooks<Definitions[K]> : never };\n      /**\n       * A hook that accepts a string endpoint name, and provides a callback that when called, pre-fetches the data for that endpoint.\n       */\n\n      usePrefetch<EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, options?: PrefetchOptions): (arg: QueryArgFrom<Definitions[EndpointName]>, options?: PrefetchOptions) => void;\n    } & HooksWithUniqueNames<Definitions>;\n  }\n}\ntype RR = typeof import('react-redux');\nexport interface ReactHooksModuleOptions {\n  /**\n   * The hooks from React Redux to be used\n   */\n  hooks?: {\n    /**\n     * The version of the `useDispatch` hook to be used\n     */\n    useDispatch: RR['useDispatch'];\n    /**\n     * The version of the `useSelector` hook to be used\n     */\n\n    useSelector: RR['useSelector'];\n    /**\n     * The version of the `useStore` hook to be used\n     */\n\n    useStore: RR['useStore'];\n  };\n  /**\n   * The version of the `batchedUpdates` function to be used\n   */\n\n  batch?: RR['batch'];\n  /**\n   * Enables performing asynchronous tasks immediately within a render.\n   *\n   * @example\n   *\n   * ```ts\n   * import {\n   *   buildCreateApi,\n   *   coreModule,\n   *   reactHooksModule\n   * } from '@reduxjs/toolkit/query/react'\n   *\n   * const createApi = buildCreateApi(\n   *   coreModule(),\n   *   reactHooksModule({ unstable__sideEffectsInRender: true })\n   * )\n   * ```\n   */\n\n  unstable__sideEffectsInRender?: boolean;\n  /**\n   * A selector creator (usually from `reselect`, or matching the same signature)\n   */\n\n  createSelector?: typeof _createSelector;\n}\n/**\n * Creates a module that generates react hooks from endpoints, for use with `buildCreateApi`.\n *\n *  @example\n * ```ts\n * const MyContext = React.createContext<ReactReduxContextValue>(null as any);\n * const customCreateApi = buildCreateApi(\n *   coreModule(),\n *   reactHooksModule({\n *     hooks: {\n *       useDispatch: createDispatchHook(MyContext),\n *       useSelector: createSelectorHook(MyContext),\n *       useStore: createStoreHook(MyContext)\n *     }\n *   })\n * );\n * ```\n *\n * @returns A module for use with `buildCreateApi`\n */\n\nexport const reactHooksModule = ({\n  batch = rrBatch,\n  hooks = {\n    useDispatch: rrUseDispatch,\n    useSelector: rrUseSelector,\n    useStore: rrUseStore\n  },\n  createSelector = _createSelector,\n  unstable__sideEffectsInRender = false,\n  ...rest\n}: ReactHooksModuleOptions = {}): Module<ReactHooksModule> => {\n  if (process.env.NODE_ENV !== 'production') {\n    const hookNames = (['useDispatch', 'useSelector', 'useStore'] as const);\n    let warned = false;\n\n    for (const hookName of hookNames) {\n      // warn for old hook options\n      if (countObjectKeys(rest) > 0) {\n        if ((rest as Partial<typeof hooks>)[hookName]) {\n          if (!warned) {\n            console.warn('As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:' + '\\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`');\n            warned = true;\n          }\n        } // migrate\n        // @ts-ignore\n\n\n        hooks[hookName] = rest[hookName];\n      } // then make sure we have them all\n\n\n      if (typeof hooks[hookName] !== 'function') {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(36) : `When using custom hooks for context, all ${hookNames.length} hooks need to be provided: ${hookNames.join(', ')}.\\nHook ${hookName} was either not provided or not a function.`);\n      }\n    }\n  }\n\n  return {\n    name: reactHooksModuleName,\n\n    init(api, {\n      serializeQueryArgs\n    }, context) {\n      const anyApi = ((api as any) as Api<any, Record<string, any>, string, string, ReactHooksModule>);\n      const {\n        buildQueryHooks,\n        buildMutationHook,\n        usePrefetch\n      } = buildHooks({\n        api,\n        moduleOptions: {\n          batch,\n          hooks,\n          unstable__sideEffectsInRender,\n          createSelector\n        },\n        serializeQueryArgs,\n        context\n      });\n      safeAssign(anyApi, {\n        usePrefetch\n      });\n      safeAssign(context, {\n        batch\n      });\n      return {\n        injectEndpoint(endpointName, definition) {\n          if (isQueryDefinition(definition)) {\n            const {\n              useQuery,\n              useLazyQuery,\n              useLazyQuerySubscription,\n              useQueryState,\n              useQuerySubscription\n            } = buildQueryHooks(endpointName);\n            safeAssign(anyApi.endpoints[endpointName], {\n              useQuery,\n              useLazyQuery,\n              useLazyQuerySubscription,\n              useQueryState,\n              useQuerySubscription\n            });\n            (api as any)[`use${capitalize(endpointName)}Query`] = useQuery;\n            (api as any)[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;\n          } else if (isMutationDefinition(definition)) {\n            const useMutation = buildMutationHook(endpointName);\n            safeAssign(anyApi.endpoints[endpointName], {\n              useMutation\n            });\n            (api as any)[`use${capitalize(endpointName)}Mutation`] = useMutation;\n          }\n        }\n\n      };\n    }\n\n  };\n};","import { formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { UnknownAction, Selector, ThunkAction, ThunkDispatch } from '@reduxjs/toolkit';\nimport type { DependencyList } from 'react';\nimport { useCallback, useDebugValue, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { QueryStatus, skipToken } from '@reduxjs/toolkit/query';\nimport type { QuerySubState, SubscriptionOptions, QueryKeys, RootState } from '@reduxjs/toolkit/query';\nimport type { EndpointDefinitions, MutationDefinition, QueryDefinition, QueryArgFrom, ResultTypeFrom, QueryResultSelectorResult, MutationResultSelectorResult, SkipToken, QueryActionCreatorResult, MutationActionCreatorResult, SerializeQueryArgs, Api, ApiContext, TSHelpersId, TSHelpersNoInfer, TSHelpersOverride, ApiEndpointMutation, ApiEndpointQuery, CoreModule, PrefetchOptions } from '@reduxjs/toolkit/query';\nimport { shallowEqual } from 'react-redux';\nimport type { ReactHooksModuleOptions } from './module';\nimport { useStableQueryArgs } from './useSerializedStableValue';\nimport type { UninitializedValue } from './constants';\nimport { UNINITIALIZED_VALUE } from './constants';\nimport { useShallowStableValue } from './useShallowStableValue';\nimport type { BaseQueryFn } from '../baseQueryTypes';\nimport { defaultSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { SubscriptionSelectors } from '../core/buildMiddleware/types'; // Copy-pasted from React-Redux\n\nexport const useIsomorphicLayoutEffect = typeof window !== 'undefined' && !!window.document && !!window.document.createElement ? useLayoutEffect : useEffect;\nexport interface QueryHooks<Definition extends QueryDefinition<any, any, any, any, any>> {\n  useQuery: UseQuery<Definition>;\n  useLazyQuery: UseLazyQuery<Definition>;\n  useQuerySubscription: UseQuerySubscription<Definition>;\n  useLazyQuerySubscription: UseLazyQuerySubscription<Definition>;\n  useQueryState: UseQueryState<Definition>;\n}\nexport interface MutationHooks<Definition extends MutationDefinition<any, any, any, any, any>> {\n  useMutation: UseMutation<Definition>;\n}\n/**\n * A React hook that automatically triggers fetches of data from an endpoint, 'subscribes' the component to the cached data, and reads the request status and cached data from the Redux store. The component will re-render as the loading status changes and the data becomes available.\n *\n * The query arg is used as a cache key. Changing the query arg will tell the hook to re-fetch the data if it does not exist in the cache already, and the hook will return the data for that query arg once it's available.\n *\n * This hook combines the functionality of both [`useQueryState`](#usequerystate) and [`useQuerySubscription`](#usequerysubscription) together, and is intended to be used in the majority of situations.\n *\n * #### Features\n *\n * - Automatically triggers requests to retrieve data based on the hook argument and whether cached data exists by default\n * - 'Subscribes' the component to keep cached data in the store, and 'unsubscribes' when the component unmounts\n * - Accepts polling/re-fetching options to trigger automatic re-fetches when the corresponding criteria is met\n * - Returns the latest request status and cached data from the Redux store\n * - Re-renders as the request status changes and data becomes available\n */\n\nexport type UseQuery<D extends QueryDefinition<any, any, any, any>> = <R extends Record<string, any> = UseQueryStateDefaultResult<D>>(arg: QueryArgFrom<D> | SkipToken, options?: UseQuerySubscriptionOptions & UseQueryStateOptions<D, R>) => UseQueryHookResult<D, R>;\nexport type UseQueryHookResult<D extends QueryDefinition<any, any, any, any>, R = UseQueryStateDefaultResult<D>> = UseQueryStateResult<D, R> & UseQuerySubscriptionResult<D>;\n/**\n * Helper type to manually type the result\n * of the `useQuery` hook in userland code.\n */\n\nexport type TypedUseQueryHookResult<ResultType, QueryArg, BaseQuery extends BaseQueryFn, R = UseQueryStateDefaultResult<QueryDefinition<QueryArg, BaseQuery, string, ResultType, string>>> = TypedUseQueryStateResult<ResultType, QueryArg, BaseQuery, R> & TypedUseQuerySubscriptionResult<ResultType, QueryArg, BaseQuery>;\ninterface UseQuerySubscriptionOptions extends SubscriptionOptions {\n  /**\n   * Prevents a query from automatically running.\n   *\n   * @remarks\n   * When `skip` is true (or `skipToken` is passed in as `arg`):\n   *\n   * - **If the query has cached data:**\n   *   * The cached data **will not be used** on the initial load, and will ignore updates from any identical query until the `skip` condition is removed\n   *   * The query will have a status of `uninitialized`\n   *   * If `skip: false` is set after the initial load, the cached result will be used\n   * - **If the query does not have cached data:**\n   *   * The query will have a status of `uninitialized`\n   *   * The query will not exist in the state when viewed with the dev tools\n   *   * The query will not automatically fetch on mount\n   *   * The query will not automatically run when additional components with the same query are added that do run\n   *\n   * @example\n   * ```tsx\n   * // codeblock-meta no-transpile title=\"Skip example\"\n   * const Pokemon = ({ name, skip }: { name: string; skip: boolean }) => {\n   *   const { data, error, status } = useGetPokemonByNameQuery(name, {\n   *     skip,\n   *   });\n   *\n   *   return (\n   *     <div>\n   *       {name} - {status}\n   *     </div>\n   *   );\n   * };\n   * ```\n   */\n  skip?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether if a cached result is already available, RTK Query will only serve a cached result, or if it should `refetch` when set to `true` or if an adequate amount of time has passed since the last successful query result.\n   * - `false` - Will not cause a query to be performed _unless_ it does not exist yet.\n   * - `true` - Will always refetch when a new subscriber to a query is added. Behaves the same as calling the `refetch` callback or passing `forceRefetch: true` in the action creator.\n   * - `number` - **Value is in seconds**. If a number is provided and there is an existing query in the cache, it will compare the current time vs the last fulfilled timestamp, and only refetch if enough time has elapsed.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   */\n\n  refetchOnMountOrArgChange?: boolean | number;\n}\n/**\n * A React hook that automatically triggers fetches of data from an endpoint, and 'subscribes' the component to the cached data.\n *\n * The query arg is used as a cache key. Changing the query arg will tell the hook to re-fetch the data if it does not exist in the cache already.\n *\n * Note that this hook does not return a request status or cached data. For that use-case, see [`useQuery`](#usequery) or [`useQueryState`](#usequerystate).\n *\n * #### Features\n *\n * - Automatically triggers requests to retrieve data based on the hook argument and whether cached data exists by default\n * - 'Subscribes' the component to keep cached data in the store, and 'unsubscribes' when the component unmounts\n * - Accepts polling/re-fetching options to trigger automatic re-fetches when the corresponding criteria is met\n */\n\nexport type UseQuerySubscription<D extends QueryDefinition<any, any, any, any>> = (arg: QueryArgFrom<D> | SkipToken, options?: UseQuerySubscriptionOptions) => UseQuerySubscriptionResult<D>;\nexport type UseQuerySubscriptionResult<D extends QueryDefinition<any, any, any, any>> = Pick<QueryActionCreatorResult<D>, 'refetch'>;\n/**\n * Helper type to manually type the result\n * of the `useQuerySubscription` hook in userland code.\n */\n\nexport type TypedUseQuerySubscriptionResult<ResultType, QueryArg, BaseQuery extends BaseQueryFn> = UseQuerySubscriptionResult<QueryDefinition<QueryArg, BaseQuery, string, ResultType, string>>;\nexport type UseLazyQueryLastPromiseInfo<D extends QueryDefinition<any, any, any, any>> = {\n  lastArg: QueryArgFrom<D>;\n};\n/**\n * A React hook similar to [`useQuery`](#usequery), but with manual control over when the data fetching occurs.\n *\n * This hook includes the functionality of [`useLazyQuerySubscription`](#uselazyquerysubscription).\n *\n * #### Features\n *\n * - Manual control over firing a request to retrieve data\n * - 'Subscribes' the component to keep cached data in the store, and 'unsubscribes' when the component unmounts\n * - Returns the latest request status and cached data from the Redux store\n * - Re-renders as the request status changes and data becomes available\n * - Accepts polling/re-fetching options to trigger automatic re-fetches when the corresponding criteria is met and the fetch has been manually called at least once\n *\n * #### Note\n *\n * When the trigger function returned from a LazyQuery is called, it always initiates a new request to the server even if there is cached data. Set `preferCacheValue`(the second argument to the function) as `true` if you want it to immediately return a cached value if one exists.\n */\n\nexport type UseLazyQuery<D extends QueryDefinition<any, any, any, any>> = <R extends Record<string, any> = UseQueryStateDefaultResult<D>>(options?: SubscriptionOptions & Omit<UseQueryStateOptions<D, R>, 'skip'>) => [LazyQueryTrigger<D>, UseQueryStateResult<D, R>, UseLazyQueryLastPromiseInfo<D>];\nexport type LazyQueryTrigger<D extends QueryDefinition<any, any, any, any>> = {\n  /**\n   * Triggers a lazy query.\n   *\n   * By default, this will start a new request even if there is already a value in the cache.\n   * If you want to use the cache value and only start a request if there is no cache value, set the second argument to `true`.\n   *\n   * @remarks\n   * If you need to access the error or success payload immediately after a lazy query, you can chain .unwrap().\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap with async await\"\n   * try {\n   *   const payload = await getUserById(1).unwrap();\n   *   console.log('fulfilled', payload)\n   * } catch (error) {\n   *   console.error('rejected', error);\n   * }\n   * ```\n   */\n  (arg: QueryArgFrom<D>, preferCacheValue?: boolean): QueryActionCreatorResult<D>;\n};\n/**\n * A React hook similar to [`useQuerySubscription`](#usequerysubscription), but with manual control over when the data fetching occurs.\n *\n * Note that this hook does not return a request status or cached data. For that use-case, see [`useLazyQuery`](#uselazyquery).\n *\n * #### Features\n *\n * - Manual control over firing a request to retrieve data\n * - 'Subscribes' the component to keep cached data in the store, and 'unsubscribes' when the component unmounts\n * - Accepts polling/re-fetching options to trigger automatic re-fetches when the corresponding criteria is met and the fetch has been manually called at least once\n */\n\nexport type UseLazyQuerySubscription<D extends QueryDefinition<any, any, any, any>> = (options?: SubscriptionOptions) => readonly [LazyQueryTrigger<D>, QueryArgFrom<D> | UninitializedValue];\nexport type QueryStateSelector<R extends Record<string, any>, D extends QueryDefinition<any, any, any, any>> = (state: UseQueryStateDefaultResult<D>) => R;\n/**\n * A React hook that reads the request status and cached data from the Redux store. The component will re-render as the loading status changes and the data becomes available.\n *\n * Note that this hook does not trigger fetching new data. For that use-case, see [`useQuery`](#usequery) or [`useQuerySubscription`](#usequerysubscription).\n *\n * #### Features\n *\n * - Returns the latest request status and cached data from the Redux store\n * - Re-renders as the request status changes and data becomes available\n */\n\nexport type UseQueryState<D extends QueryDefinition<any, any, any, any>> = <R extends Record<string, any> = UseQueryStateDefaultResult<D>>(arg: QueryArgFrom<D> | SkipToken, options?: UseQueryStateOptions<D, R>) => UseQueryStateResult<D, R>;\nexport type UseQueryStateOptions<D extends QueryDefinition<any, any, any, any>, R extends Record<string, any>> = {\n  /**\n   * Prevents a query from automatically running.\n   *\n   * @remarks\n   * When skip is true:\n   *\n   * - **If the query has cached data:**\n   *   * The cached data **will not be used** on the initial load, and will ignore updates from any identical query until the `skip` condition is removed\n   *   * The query will have a status of `uninitialized`\n   *   * If `skip: false` is set after skipping the initial load, the cached result will be used\n   * - **If the query does not have cached data:**\n   *   * The query will have a status of `uninitialized`\n   *   * The query will not exist in the state when viewed with the dev tools\n   *   * The query will not automatically fetch on mount\n   *   * The query will not automatically run when additional components with the same query are added that do run\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Skip example\"\n   * const Pokemon = ({ name, skip }: { name: string; skip: boolean }) => {\n   *   const { data, error, status } = useGetPokemonByNameQuery(name, {\n   *     skip,\n   *   });\n   *\n   *   return (\n   *     <div>\n   *       {name} - {status}\n   *     </div>\n   *   );\n   * };\n   * ```\n   */\n  skip?: boolean;\n  /**\n   * `selectFromResult` allows you to get a specific segment from a query result in a performant manner.\n   * When using this feature, the component will not rerender unless the underlying data of the selected item has changed.\n   * If the selected item is one element in a larger collection, it will disregard changes to elements in the same collection.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using selectFromResult to extract a single result\"\n   * function PostsList() {\n   *   const { data: posts } = api.useGetPostsQuery();\n   *\n   *   return (\n   *     <ul>\n   *       {posts?.data?.map((post) => (\n   *         <PostById key={post.id} id={post.id} />\n   *       ))}\n   *     </ul>\n   *   );\n   * }\n   *\n   * function PostById({ id }: { id: number }) {\n   *   // Will select the post with the given id, and will only rerender if the given posts data changes\n   *   const { post } = api.useGetPostsQuery(undefined, {\n   *     selectFromResult: ({ data }) => ({ post: data?.find((post) => post.id === id) }),\n   *   });\n   *\n   *   return <li>{post?.name}</li>;\n   * }\n   * ```\n   */\n\n  selectFromResult?: QueryStateSelector<R, D>;\n};\nexport type UseQueryStateResult<_ extends QueryDefinition<any, any, any, any>, R> = TSHelpersNoInfer<R>;\n/**\n * Helper type to manually type the result\n * of the `useQueryState` hook in userland code.\n */\n\nexport type TypedUseQueryStateResult<ResultType, QueryArg, BaseQuery extends BaseQueryFn, R = UseQueryStateDefaultResult<QueryDefinition<QueryArg, BaseQuery, string, ResultType, string>>> = TSHelpersNoInfer<R>;\ntype UseQueryStateBaseResult<D extends QueryDefinition<any, any, any, any>> = QuerySubState<D> & {\n  /**\n   * Where `data` tries to hold data as much as possible, also re-using\n   * data from the last arguments passed into the hook, this property\n   * will always contain the received data from the query, for the current query arguments.\n   */\n  currentData?: ResultTypeFrom<D>;\n  /**\n   * Query has not started yet.\n   */\n\n  isUninitialized: false;\n  /**\n   * Query is currently loading for the first time. No data yet.\n   */\n\n  isLoading: false;\n  /**\n   * Query is currently fetching, but might have data from an earlier request.\n   */\n\n  isFetching: false;\n  /**\n   * Query has data from a successful load.\n   */\n\n  isSuccess: false;\n  /**\n   * Query is currently in \"error\" state.\n   */\n\n  isError: false;\n};\ntype UseQueryStateDefaultResult<D extends QueryDefinition<any, any, any, any>> = TSHelpersId<TSHelpersOverride<Extract<UseQueryStateBaseResult<D>, {\n  status: QueryStatus.uninitialized;\n}>, {\n  isUninitialized: true;\n}> | TSHelpersOverride<UseQueryStateBaseResult<D>, {\n  isLoading: true;\n  isFetching: boolean;\n  data: undefined;\n} | ({\n  isSuccess: true;\n  isFetching: true;\n  error: undefined;\n} & Required<Pick<UseQueryStateBaseResult<D>, 'data' | 'fulfilledTimeStamp'>>) | ({\n  isSuccess: true;\n  isFetching: false;\n  error: undefined;\n} & Required<Pick<UseQueryStateBaseResult<D>, 'data' | 'fulfilledTimeStamp' | 'currentData'>>) | ({\n  isError: true;\n} & Required<Pick<UseQueryStateBaseResult<D>, 'error'>>)>> & {\n  /**\n   * @deprecated Included for completeness, but discouraged.\n   * Please use the `isLoading`, `isFetching`, `isSuccess`, `isError`\n   * and `isUninitialized` flags instead\n   */\n  status: QueryStatus;\n};\nexport type MutationStateSelector<R extends Record<string, any>, D extends MutationDefinition<any, any, any, any>> = (state: MutationResultSelectorResult<D>) => R;\nexport type UseMutationStateOptions<D extends MutationDefinition<any, any, any, any>, R extends Record<string, any>> = {\n  selectFromResult?: MutationStateSelector<R, D>;\n  fixedCacheKey?: string;\n};\nexport type UseMutationStateResult<D extends MutationDefinition<any, any, any, any>, R> = TSHelpersNoInfer<R> & {\n  originalArgs?: QueryArgFrom<D>;\n  /**\n   * Resets the hook state to it's initial `uninitialized` state.\n   * This will also remove the last result from the cache.\n   */\n\n  reset: () => void;\n};\n/**\n * Helper type to manually type the result\n * of the `useMutation` hook in userland code.\n */\n\nexport type TypedUseMutationResult<ResultType, QueryArg, BaseQuery extends BaseQueryFn, R = MutationResultSelectorResult<MutationDefinition<QueryArg, BaseQuery, string, ResultType, string>>> = UseMutationStateResult<MutationDefinition<QueryArg, BaseQuery, string, ResultType, string>, R>;\n/**\n * A React hook that lets you trigger an update request for a given endpoint, and subscribes the component to read the request status from the Redux store. The component will re-render as the loading status changes.\n *\n * #### Features\n *\n * - Manual control over firing a request to alter data on the server or possibly invalidate the cache\n * - 'Subscribes' the component to keep cached data in the store, and 'unsubscribes' when the component unmounts\n * - Returns the latest request status and cached data from the Redux store\n * - Re-renders as the request status changes and data becomes available\n */\n\nexport type UseMutation<D extends MutationDefinition<any, any, any, any>> = <R extends Record<string, any> = MutationResultSelectorResult<D>>(options?: UseMutationStateOptions<D, R>) => readonly [MutationTrigger<D>, UseMutationStateResult<D, R>];\nexport type MutationTrigger<D extends MutationDefinition<any, any, any, any>> = {\n  /**\n   * Triggers the mutation and returns a Promise.\n   * @remarks\n   * If you need to access the error or success payload immediately after a mutation, you can chain .unwrap().\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap with async await\"\n   * try {\n   *   const payload = await addPost({ id: 1, name: 'Example' }).unwrap();\n   *   console.log('fulfilled', payload)\n   * } catch (error) {\n   *   console.error('rejected', error);\n   * }\n   * ```\n   */\n  (arg: QueryArgFrom<D>): MutationActionCreatorResult<D>;\n};\n/**\n * Wrapper around `defaultQueryStateSelector` to be used in `useQuery`.\n * We want the initial render to already come back with\n * `{ isUninitialized: false, isFetching: true, isLoading: true }`\n * to prevent that the library user has to do an additional check for `isUninitialized`/\n */\n\nconst noPendingQueryStateSelector: QueryStateSelector<any, any> = selected => {\n  if (selected.isUninitialized) {\n    return ({ ...selected,\n      isUninitialized: false,\n      isFetching: true,\n      isLoading: selected.data !== undefined ? false : true,\n      status: QueryStatus.pending\n    } as any);\n  }\n\n  return selected;\n};\n\ntype GenericPrefetchThunk = (endpointName: any, arg: any, options: PrefetchOptions) => ThunkAction<void, any, any, UnknownAction>;\n/**\n *\n * @param opts.api - An API with defined endpoints to create hooks for\n * @param opts.moduleOptions.batch - The version of the `batchedUpdates` function to be used\n * @param opts.moduleOptions.useDispatch - The version of the `useDispatch` hook to be used\n * @param opts.moduleOptions.useSelector - The version of the `useSelector` hook to be used\n * @returns An object containing functions to generate hooks based on an endpoint\n */\n\nexport function buildHooks<Definitions extends EndpointDefinitions>({\n  api,\n  moduleOptions: {\n    batch,\n    hooks: {\n      useDispatch,\n      useSelector,\n      useStore\n    },\n    unstable__sideEffectsInRender,\n    createSelector\n  },\n  serializeQueryArgs,\n  context\n}: {\n  api: Api<any, Definitions, any, any, CoreModule>;\n  moduleOptions: Required<ReactHooksModuleOptions>;\n  serializeQueryArgs: SerializeQueryArgs<any>;\n  context: ApiContext<Definitions>;\n}) {\n  const usePossiblyImmediateEffect: (effect: () => void | undefined, deps?: DependencyList) => void = unstable__sideEffectsInRender ? cb => cb() : useEffect;\n  return {\n    buildQueryHooks,\n    buildMutationHook,\n    usePrefetch\n  };\n\n  function queryStatePreSelector(currentState: QueryResultSelectorResult<any>, lastResult: UseQueryStateDefaultResult<any> | undefined, queryArgs: any): UseQueryStateDefaultResult<any> {\n    // if we had a last result and the current result is uninitialized,\n    // we might have called `api.util.resetApiState`\n    // in this case, reset the hook\n    if (lastResult?.endpointName && currentState.isUninitialized) {\n      const {\n        endpointName\n      } = lastResult;\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      if (serializeQueryArgs({\n        queryArgs: lastResult.originalArgs,\n        endpointDefinition,\n        endpointName\n      }) === serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      })) lastResult = undefined;\n    } // data is the last known good request result we have tracked - or if none has been tracked yet the last good result for the current args\n\n\n    let data = currentState.isSuccess ? currentState.data : lastResult?.data;\n    if (data === undefined) data = currentState.data;\n    const hasData = data !== undefined; // isFetching = true any time a request is in flight\n\n    const isFetching = currentState.isLoading; // isLoading = true only when loading while no data is present yet (initial load with no data in the cache)\n\n    const isLoading = !hasData && isFetching; // isSuccess = true when data is present\n\n    const isSuccess = currentState.isSuccess || isFetching && hasData;\n    return ({ ...currentState,\n      data,\n      currentData: currentState.data,\n      isFetching,\n      isLoading,\n      isSuccess\n    } as UseQueryStateDefaultResult<any>);\n  }\n\n  function usePrefetch<EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, defaultOptions?: PrefetchOptions) {\n    const dispatch = useDispatch<ThunkDispatch<any, any, UnknownAction>>();\n    const stableDefaultOptions = useShallowStableValue(defaultOptions);\n    return useCallback((arg: any, options?: PrefetchOptions) => dispatch((api.util.prefetch as GenericPrefetchThunk)(endpointName, arg, { ...stableDefaultOptions,\n      ...options\n    })), [endpointName, dispatch, stableDefaultOptions]);\n  }\n\n  function buildQueryHooks(name: string): QueryHooks<any> {\n    const useQuerySubscription: UseQuerySubscription<any> = (arg: any, {\n      refetchOnReconnect,\n      refetchOnFocus,\n      refetchOnMountOrArgChange,\n      skip = false,\n      pollingInterval = 0,\n      skipPollingIfUnfocused = false\n    } = {}) => {\n      const {\n        initiate\n      } = (api.endpoints[name] as ApiEndpointQuery<QueryDefinition<any, any, any, any, any>, Definitions>);\n      const dispatch = useDispatch<ThunkDispatch<any, any, UnknownAction>>();\n      const subscriptionSelectorsRef = useRef<SubscriptionSelectors>();\n\n      if (!subscriptionSelectorsRef.current) {\n        const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (typeof returnedValue !== 'object' || typeof returnedValue?.type === 'string') {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(37) : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\n    You must add the middleware for RTK-Query to function correctly!`);\n          }\n        }\n\n        subscriptionSelectorsRef.current = ((returnedValue as unknown) as SubscriptionSelectors);\n      }\n\n      const stableArg = useStableQueryArgs(skip ? skipToken : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with\n      // a consistent return value, _here_ we want to use the default behavior\n      // so we can tell if _anything_ actually changed. Otherwise, we can end up\n      // with a case where the query args did change but the serialization doesn't,\n      // and then we never try to initiate a refetch.\n      defaultSerializeQueryArgs, context.endpointDefinitions[name], name);\n      const stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect,\n        refetchOnFocus,\n        pollingInterval,\n        skipPollingIfUnfocused\n      });\n      const lastRenderHadSubscription = useRef(false);\n      const promiseRef = useRef<QueryActionCreatorResult<any>>();\n      let {\n        queryCacheKey,\n        requestId\n      } = promiseRef.current || {}; // HACK We've saved the middleware subscription lookup callbacks into a ref,\n      // so we can directly check here if the subscription exists for this query.\n\n      let currentRenderHasSubscription = false;\n\n      if (queryCacheKey && requestId) {\n        currentRenderHasSubscription = subscriptionSelectorsRef.current.isRequestSubscribed(queryCacheKey, requestId);\n      }\n\n      const subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;\n      usePossiblyImmediateEffect(() => {\n        lastRenderHadSubscription.current = currentRenderHasSubscription;\n      });\n      usePossiblyImmediateEffect((): void | undefined => {\n        if (subscriptionRemoved) {\n          promiseRef.current = undefined;\n        }\n      }, [subscriptionRemoved]);\n      usePossiblyImmediateEffect((): void | undefined => {\n        const lastPromise = promiseRef.current;\n\n        if (typeof process !== 'undefined' && process.env.NODE_ENV === 'removeMeOnCompilation') {\n          // this is only present to enforce the rule of hooks to keep `isSubscribed` in the dependency array\n          console.log(subscriptionRemoved);\n        }\n\n        if (stableArg === skipToken) {\n          lastPromise?.unsubscribe();\n          promiseRef.current = undefined;\n          return;\n        }\n\n        const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n\n        if (!lastPromise || lastPromise.arg !== stableArg) {\n          lastPromise?.unsubscribe();\n          const promise = dispatch(initiate(stableArg, {\n            subscriptionOptions: stableSubscriptionOptions,\n            forceRefetch: refetchOnMountOrArgChange\n          }));\n          promiseRef.current = promise;\n        } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [dispatch, initiate, refetchOnMountOrArgChange, stableArg, stableSubscriptionOptions, subscriptionRemoved]);\n      useEffect(() => {\n        return () => {\n          promiseRef.current?.unsubscribe();\n          promiseRef.current = undefined;\n        };\n      }, []);\n      return useMemo(() => ({\n        /**\n         * A method to manually refetch data for the query\n         */\n        refetch: () => {\n          if (!promiseRef.current) throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(38) : 'Cannot refetch a query that has not been started yet.');\n          return promiseRef.current?.refetch();\n        }\n      }), []);\n    };\n\n    const useLazyQuerySubscription: UseLazyQuerySubscription<any> = ({\n      refetchOnReconnect,\n      refetchOnFocus,\n      pollingInterval = 0,\n      skipPollingIfUnfocused = false\n    } = {}) => {\n      const {\n        initiate\n      } = (api.endpoints[name] as ApiEndpointQuery<QueryDefinition<any, any, any, any, any>, Definitions>);\n      const dispatch = useDispatch<ThunkDispatch<any, any, UnknownAction>>();\n      const [arg, setArg] = useState<any>(UNINITIALIZED_VALUE);\n      const promiseRef = useRef<QueryActionCreatorResult<any> | undefined>();\n      const stableSubscriptionOptions = useShallowStableValue({\n        refetchOnReconnect,\n        refetchOnFocus,\n        pollingInterval,\n        skipPollingIfUnfocused\n      });\n      usePossiblyImmediateEffect(() => {\n        const lastSubscriptionOptions = promiseRef.current?.subscriptionOptions;\n\n        if (stableSubscriptionOptions !== lastSubscriptionOptions) {\n          promiseRef.current?.updateSubscriptionOptions(stableSubscriptionOptions);\n        }\n      }, [stableSubscriptionOptions]);\n      const subscriptionOptionsRef = useRef(stableSubscriptionOptions);\n      usePossiblyImmediateEffect(() => {\n        subscriptionOptionsRef.current = stableSubscriptionOptions;\n      }, [stableSubscriptionOptions]);\n      const trigger = useCallback(function (arg: any, preferCacheValue = false) {\n        let promise: QueryActionCreatorResult<any>;\n        batch(() => {\n          promiseRef.current?.unsubscribe();\n          promiseRef.current = promise = dispatch(initiate(arg, {\n            subscriptionOptions: subscriptionOptionsRef.current,\n            forceRefetch: !preferCacheValue\n          }));\n          setArg(arg);\n        });\n        return promise!;\n      }, [dispatch, initiate]);\n      /* cleanup on unmount */\n\n      useEffect(() => {\n        return () => {\n          promiseRef?.current?.unsubscribe();\n        };\n      }, []);\n      /* if \"cleanup on unmount\" was triggered from a fast refresh, we want to reinstate the query */\n\n      useEffect(() => {\n        if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {\n          trigger(arg, true);\n        }\n      }, [arg, trigger]);\n      return useMemo(() => ([trigger, arg] as const), [trigger, arg]);\n    };\n\n    const useQueryState: UseQueryState<any> = (arg: any, {\n      skip = false,\n      selectFromResult\n    } = {}) => {\n      const {\n        select\n      } = (api.endpoints[name] as ApiEndpointQuery<QueryDefinition<any, any, any, any, any>, Definitions>);\n      const stableArg = useStableQueryArgs(skip ? skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);\n      type ApiRootState = Parameters<ReturnType<typeof select>>[0];\n      const lastValue = useRef<any>();\n      const selectDefaultResult: Selector<ApiRootState, any, [any]> = useMemo(() => createSelector([select(stableArg), (_: ApiRootState, lastResult: any) => lastResult, (_: ApiRootState) => stableArg], queryStatePreSelector, {\n        memoizeOptions: {\n          resultEqualityCheck: shallowEqual\n        }\n      }), [select, stableArg]);\n      const querySelector: Selector<ApiRootState, any, [any]> = useMemo(() => selectFromResult ? createSelector([selectDefaultResult], selectFromResult, {\n        devModeChecks: {\n          identityFunctionCheck: 'never'\n        }\n      }) : selectDefaultResult, [selectDefaultResult, selectFromResult]);\n      const currentState = useSelector((state: RootState<Definitions, any, any>) => querySelector(state, lastValue.current), shallowEqual);\n      const store = useStore<RootState<Definitions, any, any>>();\n      const newLastValue = selectDefaultResult(store.getState(), lastValue.current);\n      useIsomorphicLayoutEffect(() => {\n        lastValue.current = newLastValue;\n      }, [newLastValue]);\n      return currentState;\n    };\n\n    return {\n      useQueryState,\n      useQuerySubscription,\n      useLazyQuerySubscription,\n\n      useLazyQuery(options) {\n        const [trigger, arg] = useLazyQuerySubscription(options);\n        const queryStateResults = useQueryState(arg, { ...options,\n          skip: arg === UNINITIALIZED_VALUE\n        });\n        const info = useMemo(() => ({\n          lastArg: arg\n        }), [arg]);\n        return useMemo(() => [trigger, queryStateResults, info], [trigger, queryStateResults, info]);\n      },\n\n      useQuery(arg, options) {\n        const querySubscriptionResults = useQuerySubscription(arg, options);\n        const queryStateResults = useQueryState(arg, {\n          selectFromResult: arg === skipToken || options?.skip ? undefined : noPendingQueryStateSelector,\n          ...options\n        });\n        const {\n          data,\n          status,\n          isLoading,\n          isSuccess,\n          isError,\n          error\n        } = queryStateResults;\n        useDebugValue({\n          data,\n          status,\n          isLoading,\n          isSuccess,\n          isError,\n          error\n        });\n        return useMemo(() => ({ ...queryStateResults,\n          ...querySubscriptionResults\n        }), [queryStateResults, querySubscriptionResults]);\n      }\n\n    };\n  }\n\n  function buildMutationHook(name: string): UseMutation<any> {\n    return ({\n      selectFromResult,\n      fixedCacheKey\n    } = {}) => {\n      const {\n        select,\n        initiate\n      } = (api.endpoints[name] as ApiEndpointMutation<MutationDefinition<any, any, any, any, any>, Definitions>);\n      const dispatch = useDispatch<ThunkDispatch<any, any, UnknownAction>>();\n      const [promise, setPromise] = useState<MutationActionCreatorResult<any>>();\n      useEffect(() => () => {\n        if (!promise?.arg.fixedCacheKey) {\n          promise?.reset();\n        }\n      }, [promise]);\n      const triggerMutation = useCallback(function (arg: Parameters<typeof initiate>['0']) {\n        const promise = dispatch(initiate(arg, {\n          fixedCacheKey\n        }));\n        setPromise(promise);\n        return promise;\n      }, [dispatch, initiate, fixedCacheKey]);\n      const {\n        requestId\n      } = promise || {};\n      const selectDefaultResult = useMemo(() => select({\n        fixedCacheKey,\n        requestId: promise?.requestId\n      }), [fixedCacheKey, promise, select]);\n      const mutationSelector = useMemo(() => selectFromResult ? createSelector([selectDefaultResult], selectFromResult) : selectDefaultResult, [selectFromResult, selectDefaultResult]);\n      const currentState = useSelector(mutationSelector, shallowEqual);\n      const originalArgs = fixedCacheKey == null ? promise?.arg.originalArgs : undefined;\n      const reset = useCallback(() => {\n        batch(() => {\n          if (promise) {\n            setPromise(undefined);\n          }\n\n          if (fixedCacheKey) {\n            dispatch(api.internalActions.removeMutationResult({\n              requestId,\n              fixedCacheKey\n            }));\n          }\n        });\n      }, [dispatch, fixedCacheKey, promise, requestId]);\n      const {\n        endpointName,\n        data,\n        status,\n        isLoading,\n        isSuccess,\n        isError,\n        error\n      } = currentState;\n      useDebugValue({\n        endpointName,\n        data,\n        status,\n        isLoading,\n        isSuccess,\n        isError,\n        error\n      });\n      const finalState = useMemo(() => ({ ...currentState,\n        originalArgs,\n        reset\n      }), [currentState, originalArgs, reset]);\n      return useMemo(() => ([triggerMutation, finalState] as const), [triggerMutation, finalState]);\n    };\n  }\n}","import { useEffect, useRef, useMemo } from 'react';\nimport type { SerializeQueryArgs } from '@reduxjs/toolkit/query';\nimport type { EndpointDefinition } from '@reduxjs/toolkit/query';\nexport function useStableQueryArgs<T>(queryArgs: T, serialize: SerializeQueryArgs<any>, endpointDefinition: EndpointDefinition<any, any, any, any>, endpointName: string) {\n  const incoming = useMemo(() => ({\n    queryArgs,\n    serialized: typeof queryArgs == 'object' ? serialize({\n      queryArgs,\n      endpointDefinition,\n      endpointName\n    }) : queryArgs\n  }), [queryArgs, serialize, endpointDefinition, endpointName]);\n  const cache = useRef(incoming);\n  useEffect(() => {\n    if (cache.current.serialized !== incoming.serialized) {\n      cache.current = incoming;\n    }\n  }, [incoming]);\n  return cache.current.serialized === incoming.serialized ? cache.current.queryArgs : queryArgs;\n}","export const UNINITIALIZED_VALUE = Symbol();\nexport type UninitializedValue = typeof UNINITIALIZED_VALUE;","import { useEffect, useRef } from 'react';\nimport { shallowEqual } from 'react-redux';\nexport function useShallowStableValue<T>(value: T) {\n  const cache = useRef(value);\n  useEffect(() => {\n    if (!shallowEqual(cache.current, value)) {\n      cache.current = value;\n    }\n  }, [value]);\n  return shallowEqual(cache.current, value) ? cache.current : value;\n}","// This file exists to consolidate all of the imports from the `@reduxjs/toolkit` package.\n// ESBuild does not de-duplicate imports, so this file is used to ensure that each method\n// imported is only listed once, and there's only one mention of the `@reduxjs/toolkit` package.\nexport { createAction, createSlice, createSelector, createAsyncThunk, combineReducers, createNextState, isAnyOf, isAllOf, isAction, isPending, isRejected, isFulfilled, isRejectedWithValue, isAsyncThunkAction, prepareAutoBatched, SHOULD_AUTOBATCH, isPlainObject, nanoid } from '@reduxjs/toolkit';","import type { QueryCacheKey } from './core/apiState';\nimport type { EndpointDefinition } from './endpointDefinitions';\nimport { isPlainObject } from './core/rtkImports';\nconst cache: WeakMap<any, string> | undefined = WeakMap ? new WeakMap() : undefined;\nexport const defaultSerializeQueryArgs: SerializeQueryArgs<any> = ({\n  endpointName,\n  queryArgs\n}) => {\n  let serialized = '';\n  const cached = cache?.get(queryArgs);\n\n  if (typeof cached === 'string') {\n    serialized = cached;\n  } else {\n    const stringified = JSON.stringify(queryArgs, (key, value) => isPlainObject(value) ? Object.keys(value).sort().reduce<any>((acc, key) => {\n      acc[key] = (value as any)[key];\n      return acc;\n    }, {}) : value);\n\n    if (isPlainObject(queryArgs)) {\n      cache?.set(queryArgs, stringified);\n    }\n\n    serialized = stringified;\n  } // Sort the object keys before stringifying, to prevent useQuery({ a: 1, b: 2 }) having a different cache key than useQuery({ b: 2, a: 1 })\n\n\n  return `${endpointName}(${serialized})`;\n};\nexport type SerializeQueryArgs<QueryArgs, ReturnType = string> = (_: {\n  queryArgs: QueryArgs;\n  endpointDefinition: EndpointDefinition<any, any, any, any>;\n  endpointName: string;\n}) => ReturnType;\nexport type InternalSerializeQueryArgs = (_: {\n  queryArgs: any;\n  endpointDefinition: EndpointDefinition<any, any, any, any>;\n  endpointName: string;\n}) => QueryCacheKey;","import type { SerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport type { QuerySubState, RootState } from './core/apiState';\nimport type { BaseQueryExtraOptions, BaseQueryFn, BaseQueryResult, BaseQueryArg, BaseQueryApi, QueryReturnValue, BaseQueryError, BaseQueryMeta } from './baseQueryTypes';\nimport type { HasRequiredProps, MaybePromise, OmitFromUnion, CastAny, NonUndefined, UnwrapPromise } from './tsHelpers';\nimport type { NEVER } from './fakeBaseQuery';\nimport type { Api } from '@reduxjs/toolkit/query';\nconst resultType = /* @__PURE__ */Symbol();\nconst baseQuery = /* @__PURE__ */Symbol();\ninterface EndpointDefinitionWithQuery<QueryArg, BaseQuery extends BaseQueryFn, ResultType> {\n  /**\n   * `query` can be a function that returns either a `string` or an `object` which is passed to your `baseQuery`. If you are using [fetchBaseQuery](./fetchBaseQuery), this can return either a `string` or an `object` of properties in `FetchArgs`. If you use your own custom [`baseQuery`](../../rtk-query/usage/customizing-queries), you can customize this behavior to your liking.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"query example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Post'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       // highlight-start\n   *       query: () => 'posts',\n   *       // highlight-end\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *      // highlight-start\n   *      query: (body) => ({\n   *        url: `posts`,\n   *        method: 'POST',\n   *        body,\n   *      }),\n   *      // highlight-end\n   *      invalidatesTags: [{ type: 'Post', id: 'LIST' }],\n   *    }),\n   *   })\n   * })\n   * ```\n   */\n  query(arg: QueryArg): BaseQueryArg<BaseQuery>;\n  queryFn?: never;\n  /**\n   * A function to manipulate the data returned by a query or mutation.\n   */\n\n  transformResponse?(baseQueryReturnValue: BaseQueryResult<BaseQuery>, meta: BaseQueryMeta<BaseQuery>, arg: QueryArg): ResultType | Promise<ResultType>;\n  /**\n   * A function to manipulate the data returned by a failed query or mutation.\n   */\n\n  transformErrorResponse?(baseQueryReturnValue: BaseQueryError<BaseQuery>, meta: BaseQueryMeta<BaseQuery>, arg: QueryArg): unknown;\n  /**\n   * Defaults to `true`.\n   *\n   * Most apps should leave this setting on. The only time it can be a performance issue\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\n   * you're unable to paginate it.\n   *\n   * For details of how this works, please see the below. When it is set to `false`,\n   * every request will cause subscribed components to rerender, even when the data has not changed.\n   *\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\n   */\n\n  structuralSharing?: boolean;\n}\ninterface EndpointDefinitionWithQueryFn<QueryArg, BaseQuery extends BaseQueryFn, ResultType> {\n  /**\n   * Can be used in place of `query` as an inline function that bypasses `baseQuery` completely for the endpoint.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Basic queryFn example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *     }),\n   *     flipCoin: build.query<'heads' | 'tails', void>({\n   *       // highlight-start\n   *       queryFn(arg, queryApi, extraOptions, baseQuery) {\n   *         const randomVal = Math.random()\n   *         if (randomVal < 0.45) {\n   *           return { data: 'heads' }\n   *         }\n   *         if (randomVal < 0.9) {\n   *           return { data: 'tails' }\n   *         }\n   *         return { error: { status: 500, statusText: 'Internal Server Error', data: \"Coin landed on it's edge!\" } }\n   *       }\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  queryFn(arg: QueryArg, api: BaseQueryApi, extraOptions: BaseQueryExtraOptions<BaseQuery>, baseQuery: (arg: Parameters<BaseQuery>[0]) => ReturnType<BaseQuery>): MaybePromise<QueryReturnValue<ResultType, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>>;\n  query?: never;\n  transformResponse?: never;\n  transformErrorResponse?: never;\n  /**\n   * Defaults to `true`.\n   *\n   * Most apps should leave this setting on. The only time it can be a performance issue\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\n   * you're unable to paginate it.\n   *\n   * For details of how this works, please see the below. When it is set to `false`,\n   * every request will cause subscribed components to rerender, even when the data has not changed.\n   *\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\n   */\n\n  structuralSharing?: boolean;\n}\nexport interface BaseEndpointTypes<QueryArg, BaseQuery extends BaseQueryFn, ResultType> {\n  QueryArg: QueryArg;\n  BaseQuery: BaseQuery;\n  ResultType: ResultType;\n}\nexport type BaseEndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = (([CastAny<BaseQueryResult<BaseQuery>, {}>] extends [NEVER] ? never : EndpointDefinitionWithQuery<QueryArg, BaseQuery, ResultType>) | EndpointDefinitionWithQueryFn<QueryArg, BaseQuery, ResultType>) & {\n  /* phantom type */\n  [resultType]?: ResultType;\n  /* phantom type */\n\n  [baseQuery]?: BaseQuery;\n} & HasRequiredProps<BaseQueryExtraOptions<BaseQuery>, {\n  extraOptions: BaseQueryExtraOptions<BaseQuery>;\n}, {\n  extraOptions?: BaseQueryExtraOptions<BaseQuery>;\n}>;\nexport enum DefinitionType {\n  query = 'query',\n  mutation = 'mutation',\n}\nexport type GetResultDescriptionFn<TagTypes extends string, ResultType, QueryArg, ErrorType, MetaType> = (result: ResultType | undefined, error: ErrorType | undefined, arg: QueryArg, meta: MetaType) => ReadonlyArray<TagDescription<TagTypes>>;\nexport type FullTagDescription<TagType> = {\n  type: TagType;\n  id?: number | string;\n};\nexport type TagDescription<TagType> = TagType | FullTagDescription<TagType>;\nexport type ResultDescription<TagTypes extends string, ResultType, QueryArg, ErrorType, MetaType> = ReadonlyArray<TagDescription<TagTypes>> | GetResultDescriptionFn<TagTypes, ResultType, QueryArg, ErrorType, MetaType>;\nexport interface QueryTypes<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> extends BaseEndpointTypes<QueryArg, BaseQuery, ResultType> {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseQuery<typeof api.endpoints.query.Types.QueryDefinition> = ...\n   * ```\n   */\n  QueryDefinition: QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n}\nexport interface QueryExtraOptions<TagTypes extends string, ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> {\n  type: DefinitionType.query;\n  /**\n   * Used by `query` endpoints. Determines which 'tag' is attached to the cached data returned by the query.\n   * Expects an array of tag type strings, an array of objects of tag types with ids, or a function that returns such an array.\n   * 1.  `['Post']` - equivalent to `2`\n   * 2.  `[{ type: 'Post' }]` - equivalent to `1`\n   * 3.  `[{ type: 'Post', id: 1 }]`\n   * 4.  `(result, error, arg) => ['Post']` - equivalent to `5`\n   * 5.  `(result, error, arg) => [{ type: 'Post' }]` - equivalent to `4`\n   * 6.  `(result, error, arg) => [{ type: 'Post', id: 1 }]`\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"providesTags example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n\n  providesTags?: ResultDescription<TagTypes, ResultType, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A query should not invalidate tags in the cache.\n   */\n\n  invalidatesTags?: never;\n  /**\n   * Can be provided to return a custom cache key value based on the query arguments.\n   *\n   * This is primarily intended for cases where a non-serializable value is passed as part of the query arg object and should be excluded from the cache key.  It may also be used for cases where an endpoint should only have a single cache entry, such as an infinite loading / pagination implementation.\n   *\n   * Unlike the `createApi` version which can _only_ return a string, this per-endpoint option can also return an an object, number, or boolean.  If it returns a string, that value will be used as the cache key directly.  If it returns an object / number / boolean, that value will be passed to the built-in `defaultSerializeQueryArgs`.  This simplifies the use case of stripping out args you don't want included in the cache key.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"serializeQueryArgs : exclude value\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * interface MyApiClient {\n   *   fetchPost: (id: string) => Promise<Post>\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    // Example: an endpoint with an API client passed in as an argument,\n   *    // but only the item ID should be used as the cache key\n   *    getPost: build.query<Post, { id: string; client: MyApiClient }>({\n   *      queryFn: async ({ id, client }) => {\n   *        const post = await client.fetchPost(id)\n   *        return { data: post }\n   *      },\n   *      // highlight-start\n   *      serializeQueryArgs: ({ queryArgs, endpointDefinition, endpointName }) => {\n   *        const { id } = queryArgs\n   *        // This can return a string, an object, a number, or a boolean.\n   *        // If it returns an object, number or boolean, that value\n   *        // will be serialized automatically via `defaultSerializeQueryArgs`\n   *        return { id } // omit `client` from the cache key\n   *\n   *        // Alternately, you can use `defaultSerializeQueryArgs` yourself:\n   *        // return defaultSerializeQueryArgs({\n   *        //   endpointName,\n   *        //   queryArgs: { id },\n   *        //   endpointDefinition\n   *        // })\n   *        // Or  create and return a string yourself:\n   *        // return `getPost(${id})`\n   *      },\n   *      // highlight-end\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n\n  serializeQueryArgs?: SerializeQueryArgs<QueryArg, string | number | boolean | Record<any, any>>;\n  /**\n   * Can be provided to merge an incoming response value into the current cache data.\n   * If supplied, no automatic structural sharing will be applied - it's up to\n   * you to update the cache appropriately.\n   *\n   * Since RTKQ normally replaces cache entries with the new response, you will usually\n   * need to use this with the `serializeQueryArgs` or `forceRefetch` options to keep\n   * an existing cache entry so that it can be updated.\n   *\n   * Since this is wrapped with Immer, you may either mutate the `currentCacheValue` directly,\n   * or return a new value, but _not_ both at once.\n   *\n   * Will only be called if the existing `currentCacheData` is _not_ `undefined` - on first response,\n   * the cache entry will just save the response data directly.\n   *\n   * Useful if you don't want a new request to completely override the current cache value,\n   * maybe because you have manually updated it from another source and don't want those\n   * updates to get lost.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"merge: pagination\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    listItems: build.query<string[], number>({\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\n   *     // Only have one cache entry because the arg always maps to one string\n   *     serializeQueryArgs: ({ endpointName }) => {\n   *       return endpointName\n   *      },\n   *      // Always merge incoming data to the cache entry\n   *      merge: (currentCache, newItems) => {\n   *        currentCache.push(...newItems)\n   *      },\n   *      // Refetch when the page arg changes\n   *      forceRefetch({ currentArg, previousArg }) {\n   *        return currentArg !== previousArg\n   *      },\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n\n  merge?(currentCacheData: ResultType, responseData: ResultType, otherArgs: {\n    arg: QueryArg;\n    baseQueryMeta: BaseQueryMeta<BaseQuery>;\n    requestId: string;\n    fulfilledTimeStamp: number;\n  }): ResultType | void;\n  /**\n   * Check to see if the endpoint should force a refetch in cases where it normally wouldn't.\n   * This is primarily useful for \"infinite scroll\" / pagination use cases where\n   * RTKQ is keeping a single cache entry that is added to over time, in combination\n   * with `serializeQueryArgs` returning a fixed cache key and a `merge` callback\n   * set to add incoming data to the cache entry each time.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"forceRefresh: pagination\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    listItems: build.query<string[], number>({\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\n   *     // Only have one cache entry because the arg always maps to one string\n   *     serializeQueryArgs: ({ endpointName }) => {\n   *       return endpointName\n   *      },\n   *      // Always merge incoming data to the cache entry\n   *      merge: (currentCache, newItems) => {\n   *        currentCache.push(...newItems)\n   *      },\n   *      // Refetch when the page arg changes\n   *      forceRefetch({ currentArg, previousArg }) {\n   *        return currentArg !== previousArg\n   *      },\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n\n  forceRefetch?(params: {\n    currentArg: QueryArg | undefined;\n    previousArg: QueryArg | undefined;\n    state: RootState<any, any, string>;\n    endpointState?: QuerySubState<any>;\n  }): boolean;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n\n  Types?: QueryTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type QueryDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> & QueryExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport interface MutationTypes<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> extends BaseEndpointTypes<QueryArg, BaseQuery, ResultType> {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseMutation<typeof api.endpoints.query.Types.MutationDefinition> = ...\n   * ```\n   */\n  MutationDefinition: MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n}\nexport interface MutationExtraOptions<TagTypes extends string, ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> {\n  type: DefinitionType.mutation;\n  /**\n   * Used by `mutation` endpoints. Determines which cached data should be either re-fetched or removed from the cache.\n   * Expects the same shapes as `providesTags`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"invalidatesTags example\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *       query(body) {\n   *         return {\n   *           url: `posts`,\n   *           method: 'POST',\n   *           body,\n   *         }\n   *       },\n   *       // highlight-start\n   *       invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n\n  invalidatesTags?: ResultDescription<TagTypes, ResultType, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A mutation should not provide tags to the cache.\n   */\n\n  providesTags?: never;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n\n  Types?: MutationTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type MutationDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> & MutationExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport type EndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath> | MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\nexport type EndpointDefinitions = Record<string, EndpointDefinition<any, any, any, any>>;\nexport function isQueryDefinition(e: EndpointDefinition<any, any, any, any>): e is QueryDefinition<any, any, any, any> {\n  return e.type === DefinitionType.query;\n}\nexport function isMutationDefinition(e: EndpointDefinition<any, any, any, any>): e is MutationDefinition<any, any, any, any> {\n  return e.type === DefinitionType.mutation;\n}\nexport type EndpointBuilder<BaseQuery extends BaseQueryFn, TagTypes extends string, ReducerPath extends string> = {\n  /**\n   * An endpoint definition that retrieves data, and may provide tags to the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all query endpoint options\"\n   * const api = createApi({\n   *  baseQuery,\n   *  endpoints: (build) => ({\n   *    getPost: build.query({\n   *      query: (id) => ({ url: `post/${id}` }),\n   *      // Pick out data and prevent nested properties in a hook or selector\n   *      transformResponse: (response) => response.data,\n   *      // Pick out error and prevent nested properties in a hook or selector\n   *      transformErrorResponse: (response) => response.error,\n   *      // `result` is the server response\n   *      providesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry, updateCachedData }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry, updateCachedData }) {},\n   *    }),\n   *  }),\n   *});\n   *```\n   */\n  query<ResultType, QueryArg>(definition: OmitFromUnion<QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>, 'type'>): QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  /**\n   * An endpoint definition that alters data on the server or will possibly invalidate the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all mutation endpoint options\"\n   * const api = createApi({\n   *   baseQuery,\n   *   endpoints: (build) => ({\n   *     updatePost: build.mutation({\n   *       query: ({ id, ...patch }) => ({ url: `post/${id}`, method: 'PATCH', body: patch }),\n   *       // Pick out data and prevent nested properties in a hook or selector\n   *       transformResponse: (response) => response.data,\n   *       // Pick out error and prevent nested properties in a hook or selector\n   *       transformErrorResponse: (response) => response.error,\n   *       // `result` is the server response\n   *       invalidatesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry }) {},\n   *     }),\n   *   }),\n   * });\n   * ```\n   */\n\n  mutation<ResultType, QueryArg>(definition: OmitFromUnion<MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>, 'type'>): MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n};\nexport type AssertTagTypes = <T extends FullTagDescription<string>>(t: T) => T;\nexport function calculateProvidedBy<ResultType, QueryArg, ErrorType, MetaType>(description: ResultDescription<string, ResultType, QueryArg, ErrorType, MetaType> | undefined, result: ResultType | undefined, error: ErrorType | undefined, queryArg: QueryArg, meta: MetaType | undefined, assertTagTypes: AssertTagTypes): readonly FullTagDescription<string>[] {\n  if (isFunction(description)) {\n    return description((result as ResultType), (error as undefined), queryArg, (meta as MetaType)).map(expandTagDescription).map(assertTagTypes);\n  }\n\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n\n  return [];\n}\n\nfunction isFunction<T>(t: T): t is Extract<T, Function> {\n  return typeof t === 'function';\n}\n\nexport function expandTagDescription(description: TagDescription<string>): FullTagDescription<string> {\n  return typeof description === 'string' ? {\n    type: description\n  } : description;\n}\nexport type QueryArgFrom<D extends BaseEndpointDefinition<any, any, any>> = D extends BaseEndpointDefinition<infer QA, any, any> ? QA : unknown;\nexport type ResultTypeFrom<D extends BaseEndpointDefinition<any, any, any>> = D extends BaseEndpointDefinition<any, any, infer RT> ? RT : unknown;\nexport type ReducerPathFrom<D extends EndpointDefinition<any, any, any, any, any>> = D extends EndpointDefinition<any, any, any, any, infer RP> ? RP : unknown;\nexport type TagTypesFrom<D extends EndpointDefinition<any, any, any, any>> = D extends EndpointDefinition<any, any, infer RP, any> ? RP : unknown;\nexport type TagTypesFromApi<T> = T extends Api<any, any, any, infer TagTypes> ? TagTypes : never;\nexport type DefinitionsFromApi<T> = T extends Api<any, infer Definitions, any, any> ? Definitions : never;\nexport type TransformedResponse<NewDefinitions extends EndpointDefinitions, K, ResultType> = K extends keyof NewDefinitions ? NewDefinitions[K]['transformResponse'] extends undefined ? ResultType : UnwrapPromise<ReturnType<NonUndefined<NewDefinitions[K]['transformResponse']>>> : ResultType;\nexport type OverrideResultType<Definition, NewResultType> = Definition extends QueryDefinition<infer QueryArg, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? QueryDefinition<QueryArg, BaseQuery, TagTypes, NewResultType, ReducerPath> : Definition extends MutationDefinition<infer QueryArg, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? MutationDefinition<QueryArg, BaseQuery, TagTypes, NewResultType, ReducerPath> : never;\nexport type UpdateDefinitions<Definitions extends EndpointDefinitions, NewTagTypes extends string, NewDefinitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<infer QueryArg, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? QueryDefinition<QueryArg, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : Definitions[K] extends MutationDefinition<infer QueryArg, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? MutationDefinition<QueryArg, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : never };","export function capitalize(str: string) {\n  return str.replace(str[0], str[0].toUpperCase());\n}","export type Id<T> = { [K in keyof T]: T[K] } & {};\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type Override<T1, T2> = T2 extends any ? Omit<T1, keyof T2> & T2 : never;\nexport function assertCast<T>(v: any): asserts v is T {}\nexport function safeAssign<T extends object>(target: T, ...args: Array<Partial<NoInfer<T>>>): T {\n  return Object.assign(target, ...args);\n}\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\n\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\nexport type NonOptionalKeys<T> = { [K in keyof T]-?: undefined extends T[K] ? never : K }[keyof T];\nexport type HasRequiredProps<T, True, False> = NonOptionalKeys<T> extends never ? False : True;\nexport type OptionalIfAllPropsOptional<T> = HasRequiredProps<T, T, T | never>;\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\nexport type NonUndefined<T> = T extends undefined ? never : T;\nexport type UnwrapPromise<T> = T extends PromiseLike<infer V> ? V : T;\nexport type MaybePromise<T> = T | PromiseLike<T>;\nexport type OmitFromUnion<T, K extends keyof T> = T extends any ? Omit<T, K> : never;\nexport type IsAny<T, True, False = never> = true | false extends (T extends never ? true : false) ? True : False;\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>;","// Fast method for counting an object's keys\n// without resorting to `Object.keys(obj).length\n// Will this make a big difference in perf? Probably not\n// But we can save a few allocations.\nexport function countObjectKeys(obj: Record<any, any>) {\n  let count = 0;\n\n  for (const _key in obj) {\n    count++;\n  }\n\n  return count;\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport { configureStore } from '@reduxjs/toolkit';\nimport type { Context } from 'react';\nimport { useContext } from 'react';\nimport { useEffect } from 'react';\nimport React from 'react';\nimport type { ReactReduxContextValue } from 'react-redux';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport type { Api } from '@reduxjs/toolkit/query';\n/**\n * Can be used as a `Provider` if you **do not already have a Redux store**.\n *\n * @example\n * ```tsx\n * // codeblock-meta no-transpile title=\"Basic usage - wrap your App with ApiProvider\"\n * import * as React from 'react';\n * import { ApiProvider } from '@reduxjs/toolkit/query/react';\n * import { Pokemon } from './features/Pokemon';\n *\n * function App() {\n *   return (\n *     <ApiProvider api={api}>\n *       <Pokemon />\n *     </ApiProvider>\n *   );\n * }\n * ```\n *\n * @remarks\n * Using this together with an existing redux store, both will\n * conflict with each other - please use the traditional redux setup\n * in that case.\n */\n\nexport function ApiProvider<A extends Api<any, {}, any, any>>(props: {\n  children: any;\n  api: A;\n  setupListeners?: Parameters<typeof setupListeners>[1] | false;\n  context?: Context<ReactReduxContextValue>;\n}) {\n  const context = props.context || ReactReduxContext;\n  const existingContext = useContext(context);\n\n  if (existingContext) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(35) : 'Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.');\n  }\n\n  const [store] = React.useState(() => configureStore({\n    reducer: {\n      [props.api.reducerPath]: props.api.reducer\n    },\n    middleware: gDM => gDM().concat(props.api.middleware)\n  })); // Adds the event listeners for online/offline/focus/etc\n\n  useEffect((): undefined | (() => void) => props.setupListeners === false ? undefined : setupListeners(store.dispatch, props.setupListeners), [props.setupListeners, store.dispatch]);\n  return <Provider store={store} context={context}>\n      {props.children}\n    </Provider>;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}