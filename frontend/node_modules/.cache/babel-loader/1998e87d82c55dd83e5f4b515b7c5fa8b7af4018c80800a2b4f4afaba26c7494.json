{"ast":null,"code":"// Communicate with the back-end Server\n\nimport { USERS_URL, USERS_AUTH_URL } from \"../constants\";\nimport { apiSlice } from './apiSlice';\n\n// Inject endpoints to main apiSlice\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // login user endpoint\n    login: builder.mutation({\n      // POST request (mutation instead of query)\n      query: data => ({\n        // send data to login endpoint\n        url: `${USERS_AUTH_URL}/login/`,\n        method: 'POST',\n        body: data\n      })\n    }),\n    // logout user endpoint\n    logout: builder.mutation({\n      // POST request (mutation instead of query)\n      query: () => ({\n        url: `${USERS_AUTH_URL}/logout`,\n        method: 'POST'\n      })\n    }),\n    // Get users\n    getUsers: builder.query({\n      query: () => ({\n        url: USERS_URL\n      }),\n      providesTags: ['Users'],\n      // Otherwise we need to reload the page in case a user is deleted or updated\n      keepUnusedDataFor: 5\n    }),\n    // Register user endpoint\n    // register: builder.mutation({      // POST request (mutation instead of query)\n    //     query: (data) => ({           // send data to login endpoint\n    //         url: USERS_URL,\n    //         method: 'POST',\n    //         body: data,\n    //     }),\n    // }),\n    // Update user profile endpoint\n    profile: builder.mutation({\n      // POST request (mutation instead of query)\n      query: data => ({\n        url: `${USERS_URL}/${data.id}`,\n        method: 'PUT',\n        body: data\n      })\n    })\n    // ----------------------------------------------------------\n    // ADMIN\n    // ----------------------------------------------------------\n\n    // Delete user\n    // deleteUser: builder.mutation({\n    //     query: (userId) => ({\n    //         url: `${USERS_URL}/${userId}`,\n    //         method: 'DELETE',\n    //     }),\n    // }),\n    // Get user details\n    // getUserDetails: builder.query({\n    //     query: (userId) => ({\n    //         url: `${USERS_URL}/${userId}`,\n    //     }),\n    //     keepUnusedDataFor: 5,\n    // }),\n    // Update user\n    // updateUser: builder.mutation({\n    //     query: (data) => ({\n    //         url: `${USERS_URL}/${data.userId}`,\n    //         method: 'PUT',\n    //         body: data,\n    //     }),\n    //     invalidatesTags: ['Users'],  // it is stopped from beeing cached. So we have fresh data. We get read of any cached data\n    // }),\n  })\n});\nexport const {\n  useLoginMutation,\n  useLogoutMutation,\n  // useRegisterMutation,\n  useProfileMutation,\n  useGetUsersQuery\n  // useDeleteUserMutation,\n  // useGetUserDetailsQuery,\n  // useUpdateUserMutation\n} = usersApiSlice;","map":{"version":3,"names":["USERS_URL","USERS_AUTH_URL","apiSlice","usersApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","data","url","method","body","logout","getUsers","providesTags","keepUnusedDataFor","profile","id","useLoginMutation","useLogoutMutation","useProfileMutation","useGetUsersQuery"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/slices/usersApiSlice.js"],"sourcesContent":["// Communicate with the back-end Server\r\n\r\nimport { USERS_URL, USERS_AUTH_URL } from \"../constants\";\r\nimport { apiSlice } from './apiSlice';\r\n\r\n// Inject endpoints to main apiSlice\r\nexport const usersApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        // login user endpoint\r\n        login: builder.mutation({      // POST request (mutation instead of query)\r\n            query: (data) => ({        // send data to login endpoint\r\n                url: `${USERS_AUTH_URL}/login/`,\r\n                method: 'POST',\r\n                body: data,\r\n            }),\r\n        }),\r\n        // logout user endpoint\r\n        logout: builder.mutation({      // POST request (mutation instead of query)\r\n            query: () => ({\r\n                url: `${USERS_AUTH_URL}/logout`,\r\n                method: 'POST',\r\n            }),\r\n        }),\r\n        // Get users\r\n        getUsers: builder.query({\r\n            query: () => ({\r\n                url: USERS_URL,\r\n            }),\r\n            providesTags: ['Users'], // Otherwise we need to reload the page in case a user is deleted or updated\r\n            keepUnusedDataFor: 5\r\n        }),\r\n\r\n        // Register user endpoint\r\n        // register: builder.mutation({      // POST request (mutation instead of query)\r\n        //     query: (data) => ({           // send data to login endpoint\r\n        //         url: USERS_URL,\r\n        //         method: 'POST',\r\n        //         body: data,\r\n        //     }),\r\n        // }),\r\n        // Update user profile endpoint\r\n        profile: builder.mutation({      // POST request (mutation instead of query)\r\n            query: (data) => ({\r\n                url: `${USERS_URL}/${data.id}`,\r\n                method: 'PUT',\r\n                body: data,\r\n            }),\r\n        }),\r\n        // ----------------------------------------------------------\r\n        // ADMIN\r\n        // ----------------------------------------------------------\r\n\r\n        // Delete user\r\n        // deleteUser: builder.mutation({\r\n        //     query: (userId) => ({\r\n        //         url: `${USERS_URL}/${userId}`,\r\n        //         method: 'DELETE',\r\n        //     }),\r\n        // }),\r\n        // Get user details\r\n        // getUserDetails: builder.query({\r\n        //     query: (userId) => ({\r\n        //         url: `${USERS_URL}/${userId}`,\r\n        //     }),\r\n        //     keepUnusedDataFor: 5,\r\n        // }),\r\n        // Update user\r\n        // updateUser: builder.mutation({\r\n        //     query: (data) => ({\r\n        //         url: `${USERS_URL}/${data.userId}`,\r\n        //         method: 'PUT',\r\n        //         body: data,\r\n        //     }),\r\n        //     invalidatesTags: ['Users'],  // it is stopped from beeing cached. So we have fresh data. We get read of any cached data\r\n        // }),\r\n    }),\r\n});\r\n\r\nexport const {\r\n    useLoginMutation,\r\n    useLogoutMutation,\r\n    // useRegisterMutation,\r\n    useProfileMutation,\r\n    useGetUsersQuery,\r\n    // useDeleteUserMutation,\r\n    // useGetUserDetailsQuery,\r\n    // useUpdateUserMutation\r\n} = usersApiSlice;\r\n"],"mappings":"AAAA;;AAEA,SAASA,SAAS,EAAEC,cAAc,QAAQ,cAAc;AACxD,SAASC,QAAQ,QAAQ,YAAY;;AAErC;AACA,OAAO,MAAMC,aAAa,GAAGD,QAAQ,CAACE,eAAe,CAAC;EAClDC,SAAS,EAAGC,OAAO,KAAM;IACrB;IACAC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MAAO;MAC3BC,KAAK,EAAGC,IAAI,KAAM;QAAS;QACvBC,GAAG,EAAG,GAAEV,cAAe,SAAQ;QAC/BW,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACV,CAAC;IACL,CAAC,CAAC;IACF;IACAI,MAAM,EAAER,OAAO,CAACE,QAAQ,CAAC;MAAO;MAC5BC,KAAK,EAAEA,CAAA,MAAO;QACVE,GAAG,EAAG,GAAEV,cAAe,SAAQ;QAC/BW,MAAM,EAAE;MACZ,CAAC;IACL,CAAC,CAAC;IACF;IACAG,QAAQ,EAAET,OAAO,CAACG,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,MAAO;QACVE,GAAG,EAAEX;MACT,CAAC,CAAC;MACFgB,YAAY,EAAE,CAAC,OAAO,CAAC;MAAE;MACzBC,iBAAiB,EAAE;IACvB,CAAC,CAAC;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,OAAO,EAAEZ,OAAO,CAACE,QAAQ,CAAC;MAAO;MAC7BC,KAAK,EAAGC,IAAI,KAAM;QACdC,GAAG,EAAG,GAAEX,SAAU,IAAGU,IAAI,CAACS,EAAG,EAAC;QAC9BP,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEH;MACV,CAAC;IACL,CAAC;IACD;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTU,gBAAgB;EAChBC,iBAAiB;EACjB;EACAC,kBAAkB;EAClBC;EACA;EACA;EACA;AACJ,CAAC,GAAGpB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}