{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\Portofolio\\\\barber-shop\\\\frontend\\\\src\\\\screens\\\\book\\\\ChooseBarberScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n// Components\nimport FormContainer from '../../components/common/FormContainer';\nimport BookingSteps from '../../components/booking/BookingSteps';\n// Slices\nimport { useGetBarbersQuery } from '../../slices/usersApiSlice';\n// import { saveShippingAddress } from '../../slices/cartSlice';\nimport { saveBarber } from '../../slices/bookingSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChooseBarberScreen() {\n  _s();\n  // Api Slice: Get the barbers\n  const {\n    data: barbers,\n    isLoading,\n    error\n  } = useGetBarbersQuery();\n  console.log(barbers);\n  // Get the barber global state\n  const booking = useSelector(state => state.booking);\n  const {\n    barber\n  } = booking;\n\n  // Populate the component local state based on the results of the global state if any\n  // const [address, setAddress] = useState(shippingAddress?.address || '');\n  // const [city, setCity] = useState(shippingAddress?.city || '');\n  // const [postalCode, setPostalCode] = useState(shippingAddress?.postalCode || '');\n  // const [country, setCountry] = useState(shippingAddress?.country || '');\n\n  const [barberName, setBarberName] = useState((barber === null || barber === void 0 ? void 0 : barber.username) || '');\n  const [selectedBarber, setSelectedBarber] = useState(null);\n\n  // const isFormFilled = address && city && postalCode && country;\n\n  // Initialization\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const submitHandler = e => {\n    e.preventDefault();\n    // Update the global state\n    dispatch(saveBarber({\n      selectedBarber\n    }));\n    navigate('/booking-datetime');\n  };\n  const handleBarberSelect = barberId => {\n    setSelectedBarber(barberId);\n  };\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: [/*#__PURE__*/_jsxDEV(BookingSteps, {\n      step1: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select Barber\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: barbers.map(barber => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4 mb-4\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            onClick: () => handleBarberSelect(barber.id),\n            className: selectedBarber === barber.id ? 'selected-card my-3 p-3 rounded' : 'my-3 p-3 rounded',\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              src: barber.image,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                as: \"div\",\n                className: \"card-title\",\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: barber.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 73\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"radio\",\n                id: `barber-${barber.id}`,\n                label: \"\",\n                checked: selectedBarber === barber.id,\n                onChange: () => handleBarberSelect(barber.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this)\n        }, barber.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"primary\",\n        className: \"my-2\"\n        // disabled={!isFormFilled}\n        ,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(ChooseBarberScreen, \"icKbVzRoX2ZH9+lP7FO2MeKayZs=\", false, function () {\n  return [useGetBarbersQuery, useSelector, useNavigate, useDispatch];\n});\n_c = ChooseBarberScreen;\nexport default ChooseBarberScreen;\nvar _c;\n$RefreshReg$(_c, \"ChooseBarberScreen\");","map":{"version":3,"names":["React","useState","Form","Button","Card","useDispatch","useSelector","useNavigate","FormContainer","BookingSteps","useGetBarbersQuery","saveBarber","jsxDEV","_jsxDEV","ChooseBarberScreen","_s","data","barbers","isLoading","error","console","log","booking","state","barber","barberName","setBarberName","username","selectedBarber","setSelectedBarber","navigate","dispatch","submitHandler","e","preventDefault","handleBarberSelect","barberId","children","step1","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","map","onClick","id","Img","src","image","variant","Body","Title","as","Check","type","label","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/screens/book/ChooseBarberScreen.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button, Card } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n// Components\r\nimport FormContainer from '../../components/common/FormContainer';\r\nimport BookingSteps from '../../components/booking/BookingSteps';\r\n// Slices\r\nimport { useGetBarbersQuery } from '../../slices/usersApiSlice';\r\n// import { saveShippingAddress } from '../../slices/cartSlice';\r\nimport { saveBarber } from '../../slices/bookingSlice';\r\n\r\nfunction ChooseBarberScreen() {\r\n    // Api Slice: Get the barbers\r\n    const { data: barbers, isLoading, error} = useGetBarbersQuery();\r\n    console.log(barbers)\r\n    // Get the barber global state\r\n    const booking = useSelector((state) => state.booking);\r\n    const { barber } = booking;\r\n\r\n    // Populate the component local state based on the results of the global state if any\r\n    // const [address, setAddress] = useState(shippingAddress?.address || '');\r\n    // const [city, setCity] = useState(shippingAddress?.city || '');\r\n    // const [postalCode, setPostalCode] = useState(shippingAddress?.postalCode || '');\r\n    // const [country, setCountry] = useState(shippingAddress?.country || '');\r\n\r\n    const [barberName, setBarberName] = useState(barber?.username || '')\r\n    const [selectedBarber, setSelectedBarber] = useState(null);\r\n\r\n    // const isFormFilled = address && city && postalCode && country;\r\n\r\n    // Initialization\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        // Update the global state\r\n        dispatch(saveBarber({selectedBarber}));\r\n        navigate('/booking-datetime');\r\n    }\r\n\r\n      const handleBarberSelect = (barberId) => {\r\n        setSelectedBarber(barberId);\r\n      };\r\n\r\n  return (\r\n    <FormContainer>\r\n        <BookingSteps step1 />\r\n        <h1>Select Barber</h1>\r\n        <Form onSubmit={submitHandler}>\r\n            {/* Barber */}\r\n            <div className=\"row\">\r\n                {barbers.map((barber) => (\r\n                <div key={barber.id} className=\"col-md-4 mb-4\">\r\n                    <Card\r\n                    onClick={() => handleBarberSelect(barber.id)}\r\n                    className={selectedBarber === barber.id ? 'selected-card my-3 p-3 rounded' : 'my-3 p-3 rounded'}\r\n                    >\r\n                        <Card.Img src={barber.image} variant='top' />\r\n                        <Card.Body>\r\n                            <Card.Title as='div' className='card-title'><strong>{barber.username}</strong></Card.Title>\r\n                            <Form.Check\r\n                                type=\"radio\"\r\n                                id={`barber-${barber.id}`}\r\n                                label=''\r\n                                checked={selectedBarber === barber.id}\r\n                                onChange={() => handleBarberSelect(barber.id)}\r\n                            />\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n                ))}\r\n            </div>\r\n\r\n\r\n\r\n            {/* Country */}\r\n            {/* <Form.Group controlId='country' className='my-2'>\r\n                <Form.Label>Country:</Form.Label>\r\n                <Form.Control\r\n                    type='text'\r\n                    placeholder='Insert country'\r\n                    value={country}\r\n                    onChange={(e) => setCountry(e.target.value)}\r\n                >\r\n                </Form.Control>\r\n            </Form.Group> */}\r\n            {/* Submit Button */}\r\n            <Button\r\n                type='submit'\r\n                variant='primary'\r\n                className='my-2'\r\n                // disabled={!isFormFilled}\r\n            >\r\n                Continue\r\n            </Button>\r\n        </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default ChooseBarberScreen"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AACpD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA,OAAOC,aAAa,MAAM,uCAAuC;AACjE,OAAOC,YAAY,MAAM,uCAAuC;AAChE;AACA,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D;AACA,SAASC,UAAU,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC1B;EACA,MAAM;IAAEC,IAAI,EAAEC,OAAO;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAGT,kBAAkB,CAAC,CAAC;EAC/DU,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;EACpB;EACA,MAAMK,OAAO,GAAGhB,WAAW,CAAEiB,KAAK,IAAKA,KAAK,CAACD,OAAO,CAAC;EACrD,MAAM;IAAEE;EAAO,CAAC,GAAGF,OAAO;;EAE1B;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,CAAAuB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,QAAQ,KAAI,EAAE,CAAC;EACpE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;;EAE1D;;EAEA;EACA,MAAM6B,QAAQ,GAAGvB,WAAW,CAAC,CAAC;EAC9B,MAAMwB,QAAQ,GAAG1B,WAAW,CAAC,CAAC;EAE9B,MAAM2B,aAAa,GAAIC,CAAC,IAAK;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACAH,QAAQ,CAACpB,UAAU,CAAC;MAACiB;IAAc,CAAC,CAAC,CAAC;IACtCE,QAAQ,CAAC,mBAAmB,CAAC;EACjC,CAAC;EAEC,MAAMK,kBAAkB,GAAIC,QAAQ,IAAK;IACvCP,iBAAiB,CAACO,QAAQ,CAAC;EAC7B,CAAC;EAEL,oBACEvB,OAAA,CAACL,aAAa;IAAA6B,QAAA,gBACVxB,OAAA,CAACJ,YAAY;MAAC6B,KAAK;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtB7B,OAAA;MAAAwB,QAAA,EAAI;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB7B,OAAA,CAACX,IAAI;MAACyC,QAAQ,EAAEX,aAAc;MAAAK,QAAA,gBAE1BxB,OAAA;QAAK+B,SAAS,EAAC,KAAK;QAAAP,QAAA,EACfpB,OAAO,CAAC4B,GAAG,CAAErB,MAAM,iBACpBX,OAAA;UAAqB+B,SAAS,EAAC,eAAe;UAAAP,QAAA,eAC1CxB,OAAA,CAACT,IAAI;YACL0C,OAAO,EAAEA,CAAA,KAAMX,kBAAkB,CAACX,MAAM,CAACuB,EAAE,CAAE;YAC7CH,SAAS,EAAEhB,cAAc,KAAKJ,MAAM,CAACuB,EAAE,GAAG,gCAAgC,GAAG,kBAAmB;YAAAV,QAAA,gBAE5FxB,OAAA,CAACT,IAAI,CAAC4C,GAAG;cAACC,GAAG,EAAEzB,MAAM,CAAC0B,KAAM;cAACC,OAAO,EAAC;YAAK;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC7C7B,OAAA,CAACT,IAAI,CAACgD,IAAI;cAAAf,QAAA,gBACNxB,OAAA,CAACT,IAAI,CAACiD,KAAK;gBAACC,EAAE,EAAC,KAAK;gBAACV,SAAS,EAAC,YAAY;gBAAAP,QAAA,eAACxB,OAAA;kBAAAwB,QAAA,EAASb,MAAM,CAACG;gBAAQ;kBAAAY,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAS;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eAC3F7B,OAAA,CAACX,IAAI,CAACqD,KAAK;gBACPC,IAAI,EAAC,OAAO;gBACZT,EAAE,EAAG,UAASvB,MAAM,CAACuB,EAAG,EAAE;gBAC1BU,KAAK,EAAC,EAAE;gBACRC,OAAO,EAAE9B,cAAc,KAAKJ,MAAM,CAACuB,EAAG;gBACtCY,QAAQ,EAAEA,CAAA,KAAMxB,kBAAkB,CAACX,MAAM,CAACuB,EAAE;cAAE;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV;QAAC,GAhBDlB,MAAM,CAACuB,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiBd,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAgBN7B,OAAA,CAACV,MAAM;QACHqD,IAAI,EAAC,QAAQ;QACbL,OAAO,EAAC,SAAS;QACjBP,SAAS,EAAC;QACV;QAAA;QAAAP,QAAA,EACH;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEpB;AAAC3B,EAAA,CAxFQD,kBAAkB;EAAA,QAEoBJ,kBAAkB,EAG7CJ,WAAW,EAeVC,WAAW,EACXF,WAAW;AAAA;AAAAuD,EAAA,GArBvB9C,kBAAkB;AA0F3B,eAAeA,kBAAkB;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}