{"ast":null,"code":"// Manipulate global frond-end state\n\nimport { createSlice } from '@reduxjs/toolkit';\n// import { updateCart } from '../utils/cartUtils';\n\nconst initialState = localStorage.getItem('booking') ? JSON.parse(localStorage.getItem('booking')) : {\n  barber: {},\n  dateTime: {},\n  custInfo: {}\n}; // I use localstorage to make sure that the state is kept intact when the user comes back after leaves the website\n\nconst cartSlice = createSlice({\n  name: 'booking',\n  initialState,\n  reducers: {\n    // addToCart: (state, action) => {\n    //     const item = action.payload;\n\n    //     const existItem = state.cartItems.find((x) => x._id === item._id);\n\n    //     if (existItem) {\n    //         state.cartItems = state.cartItems.map((x) => x._id === existItem._id ? item : x);\n    //     } else {\n    //         state.cartItems = [...state.cartItems, item]\n    //     }\n\n    //     return updateCart(state);\n    // },\n    // removeFromCart: (state, action) => {\n    //     state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);\n\n    //     return updateCart(state);\n    // },\n    saveBarber: (state, action) => {\n      state.barber = action.payload;\n      localStorage.setItem('barber', JSON.stringify(action.payload));\n    },\n    saveDateTime: (state, action) => {\n      state.dateTime = action.payload;\n      localStorage.setItem('dateTime', JSON.stringify(action.payload));\n    },\n    saveCustInfo: (state, action) => {\n      state.custInfo = action.payload;\n      localStorage.setItem('custInfo', JSON.stringify(action.payload));\n    },\n    resetBooking: state => initialState\n  }\n});\n\n// Export Actions\nexport const {\n  addToCart,\n  removeFromCart,\n  saveShippingAddress,\n  savePaymentMethod,\n  clearCartItems,\n  resetCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","localStorage","getItem","JSON","parse","barber","dateTime","custInfo","cartSlice","name","reducers","saveBarber","state","action","payload","setItem","stringify","saveDateTime","saveCustInfo","resetBooking","addToCart","removeFromCart","saveShippingAddress","savePaymentMethod","clearCartItems","resetCart","actions","reducer"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/slices/bookingSlice.js"],"sourcesContent":["// Manipulate global frond-end state\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n// import { updateCart } from '../utils/cartUtils';\r\n\r\nconst initialState = localStorage.getItem('booking') ? JSON.parse(localStorage.getItem('booking')) : {barber: {}, dateTime: {}, custInfo: {}};  // I use localstorage to make sure that the state is kept intact when the user comes back after leaves the website\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'booking',\r\n    initialState,\r\n    reducers: {\r\n        // addToCart: (state, action) => {\r\n        //     const item = action.payload;\r\n\r\n        //     const existItem = state.cartItems.find((x) => x._id === item._id);\r\n\r\n        //     if (existItem) {\r\n        //         state.cartItems = state.cartItems.map((x) => x._id === existItem._id ? item : x);\r\n        //     } else {\r\n        //         state.cartItems = [...state.cartItems, item]\r\n        //     }\r\n\r\n        //     return updateCart(state);\r\n        // },\r\n        // removeFromCart: (state, action) => {\r\n        //     state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);\r\n\r\n        //     return updateCart(state);\r\n        // },\r\n        saveBarber: (state, action) => {\r\n            state.barber = action.payload;\r\n            localStorage.setItem('barber', JSON.stringify(action.payload));\r\n        },\r\n        saveDateTime: (state, action) => {\r\n            state.dateTime = action.payload;\r\n            localStorage.setItem('dateTime', JSON.stringify(action.payload));\r\n        },\r\n        saveCustInfo: (state, action) => {\r\n            state.custInfo = action.payload;\r\n            localStorage.setItem('custInfo', JSON.stringify(action.payload));\r\n        },\r\n        resetBooking: (state) => initialState\r\n    }\r\n})\r\n\r\n// Export Actions\r\nexport const {\r\n    addToCart,\r\n    removeFromCart,\r\n    saveShippingAddress,\r\n    savePaymentMethod,\r\n    clearCartItems,\r\n    resetCart\r\n} = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;;AAEA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG;EAACG,MAAM,EAAE,CAAC,CAAC;EAAEC,QAAQ,EAAE,CAAC,CAAC;EAAEC,QAAQ,EAAE,CAAC;AAAC,CAAC,CAAC,CAAE;;AAEhJ,MAAMC,SAAS,GAAGT,WAAW,CAAC;EAC1BU,IAAI,EAAE,SAAS;EACfT,YAAY;EACZU,QAAQ,EAAE;IACN;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACAC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACP,MAAM,GAAGQ,MAAM,CAACC,OAAO;MAC7Bb,YAAY,CAACc,OAAO,CAAC,QAAQ,EAAEZ,IAAI,CAACa,SAAS,CAACH,MAAM,CAACC,OAAO,CAAC,CAAC;IAClE,CAAC;IACDG,YAAY,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACN,QAAQ,GAAGO,MAAM,CAACC,OAAO;MAC/Bb,YAAY,CAACc,OAAO,CAAC,UAAU,EAAEZ,IAAI,CAACa,SAAS,CAACH,MAAM,CAACC,OAAO,CAAC,CAAC;IACpE,CAAC;IACDI,YAAY,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACL,QAAQ,GAAGM,MAAM,CAACC,OAAO;MAC/Bb,YAAY,CAACc,OAAO,CAAC,UAAU,EAAEZ,IAAI,CAACa,SAAS,CAACH,MAAM,CAACC,OAAO,CAAC,CAAC;IACpE,CAAC;IACDK,YAAY,EAAGP,KAAK,IAAKZ;EAC7B;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACToB,SAAS;EACTC,cAAc;EACdC,mBAAmB;EACnBC,iBAAiB;EACjBC,cAAc;EACdC;AACJ,CAAC,GAAGjB,SAAS,CAACkB,OAAO;AAErB,eAAelB,SAAS,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}