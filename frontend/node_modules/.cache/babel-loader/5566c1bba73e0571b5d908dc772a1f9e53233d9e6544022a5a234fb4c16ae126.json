{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\Portofolio\\\\barber-shop\\\\frontend\\\\src\\\\screens\\\\book\\\\BookScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from 'react-redux';\n// Components\nimport Loader from '../../components/common/Loader';\n// Slices\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BookScreen = () => {\n  _s();\n  //   const { user } = useAuthContext();\n  //   const {addBooking, removeTimeslot, bookingError, bookingIsPending} = useAddBooking();\n  //   // Fetch dates and timeslots from Firestore\n  //   const {data} = useCollection('dates');\n  //   const [availableTimeslots, setAvailableTimeslots] = useState([]);\n\n  // Used for the Client-side validation\n  const today = new Date();\n  const yesterday = new Date(today);\n  yesterday.setDate(today.getDate() - 1);\n  const formik = useFormik({\n    initialValues: {\n      date: new Date().toLocaleDateString(\"en-CA\")\n      //   time: '',\n      //   guests: 1,\n      //   occasion: \"\",\n    },\n    onSubmit: async values => {\n      //   const uid = user.uid;  // Add the uid also to the doc to provide bookings info to a specific user\n      //   const doc = { ...values, uid };\n      try {\n        // Create a new booking document in the DB\n        // await addBooking(doc);\n        // Remove a timeslot from the dates collection\n        // await removeTimeslot(doc);\n      } catch (err) {\n        console.log('Registering new booking failed', err);\n        formik.resetForm();\n      }\n    },\n    validationSchema: Yup.object({\n      date: Yup.date().min(yesterday, \"Date can't be in the past\").required(\"Date is required\")\n      //   time: Yup.string().oneOf(availableTimeslots).required(\"Select one of the available time slots\"),\n      //   guests: Yup.number().min(1, \"Must be at least 1\").max(10, \"Must be at most 10\").required(\"Guest selection is required\"),\n      //   occasion: Yup.string().oneOf([\"birthday\", \"anniversary\"]).required(\"Occasion is required\"),\n    })\n  });\n\n  // Update available timeslots when date changes\n  //     useEffect(() => {\n  //       if (data) {\n  //           const selectedDate = formik.values.date;\n  //           const dateData = data.find(d => d.id === selectedDate);\n  //           if (dateData && dateData.timeslots) {\n  //               setAvailableTimeslots(dateData.timeslots);\n  //           } else {\n  //               setAvailableTimeslots([]);\n  //           }\n  //       }\n  //   }, [formik.values.date, data]);\n  const bookingIsPending = false;\n  const bookingError = false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Book Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formInput\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: formik.handleSubmit,\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formDivs\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"res-date\",\n              children: \"Choose date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              \"data-testid\": \"res-date\",\n              className: formik.errors.date ? \"ErrorBookingInput\" : \"BookingInput\",\n              type: \"date\",\n              id: \"res-date\",\n              ...formik.getFieldProps(\"date\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }, this), formik.errors.date && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"ErrorDiv\",\n              children: formik.errors.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 44\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), bookingIsPending ? /*#__PURE__*/_jsxDEV(\"input\", {\n            \"aria-label\": \"On Click\",\n            disabled: true,\n            className: \"CustomButton\",\n            type: \"submit\",\n            value: \"loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            \"aria-label\": \"On Click\",\n            disabled: formik.errors.date || formik.errors.time || formik.errors.guests || formik.errors.occasion,\n            className: \"CustomButton\",\n            type: \"submit\",\n            value: \"Make Your reservation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 19\n          }, this), bookingError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ErrorDiv\",\n            children: \"Something went wrong! Booking is not submitted.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(BookScreen, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n_c = BookScreen;\nvar _c;\n$RefreshReg$(_c, \"BookScreen\");","map":{"version":3,"names":["React","useState","useEffect","useFormik","Yup","useDispatch","useSelector","Loader","jsxDEV","_jsxDEV","BookScreen","_s","today","Date","yesterday","setDate","getDate","formik","initialValues","date","toLocaleDateString","onSubmit","values","err","console","log","resetForm","validationSchema","object","min","required","bookingIsPending","bookingError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","noValidate","htmlFor","errors","type","id","getFieldProps","disabled","value","time","guests","occasion","_c","$RefreshReg$"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/screens/book/BookScreen.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// Components\r\nimport Loader from '../../components/common/Loader';\r\n// Slices\r\n\r\nexport const BookScreen = () => {\r\n//   const { user } = useAuthContext();\r\n//   const {addBooking, removeTimeslot, bookingError, bookingIsPending} = useAddBooking();\r\n//   // Fetch dates and timeslots from Firestore\r\n//   const {data} = useCollection('dates');\r\n//   const [availableTimeslots, setAvailableTimeslots] = useState([]);\r\n\r\n  // Used for the Client-side validation\r\n  const today = new Date();\r\n  const yesterday = new Date(today);\r\n  yesterday.setDate(today.getDate() - 1);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      date: (new Date()).toLocaleDateString(\"en-CA\"),\r\n    //   time: '',\r\n    //   guests: 1,\r\n    //   occasion: \"\",\r\n    },\r\n    onSubmit: async (values) => {\r\n    //   const uid = user.uid;  // Add the uid also to the doc to provide bookings info to a specific user\r\n    //   const doc = { ...values, uid };\r\n      try{\r\n        // Create a new booking document in the DB\r\n        // await addBooking(doc);\r\n        // Remove a timeslot from the dates collection\r\n        // await removeTimeslot(doc);\r\n      } catch (err) {\r\n        console.log('Registering new booking failed',err);\r\n        formik.resetForm();\r\n      }\r\n    },\r\n    validationSchema: Yup.object({\r\n      date: Yup.date().min(yesterday, \"Date can't be in the past\").required(\"Date is required\"),\r\n    //   time: Yup.string().oneOf(availableTimeslots).required(\"Select one of the available time slots\"),\r\n    //   guests: Yup.number().min(1, \"Must be at least 1\").max(10, \"Must be at most 10\").required(\"Guest selection is required\"),\r\n    //   occasion: Yup.string().oneOf([\"birthday\", \"anniversary\"]).required(\"Occasion is required\"),\r\n    }),\r\n  });\r\n\r\n    // Update available timeslots when date changes\r\n//     useEffect(() => {\r\n//       if (data) {\r\n//           const selectedDate = formik.values.date;\r\n//           const dateData = data.find(d => d.id === selectedDate);\r\n//           if (dateData && dateData.timeslots) {\r\n//               setAvailableTimeslots(dateData.timeslots);\r\n//           } else {\r\n//               setAvailableTimeslots([]);\r\n//           }\r\n//       }\r\n//   }, [formik.values.date, data]);\r\nconst bookingIsPending = false;\r\nconst bookingError = false;\r\n  return (\r\n    <div className=\"formContainer\">\r\n        <div className='form'>\r\n            <div >\r\n                <h2>Book Now</h2>\r\n            </div>\r\n            <div className='formInput'>\r\n              <form onSubmit={formik.handleSubmit} noValidate>\r\n                {/* Date */}\r\n                <div className='formDivs' >\r\n                    <label htmlFor=\"res-date\">Choose date</label>\r\n                    <input\r\n                      data-testid=\"res-date\"\r\n                      className={( formik.errors.date) ? \"ErrorBookingInput\" : \"BookingInput\" }\r\n                      type=\"date\"\r\n                      id=\"res-date\"\r\n                      {...formik.getFieldProps(\"date\")}\r\n                    />\r\n                    {formik.errors.date && <p className=\"ErrorDiv\">{formik.errors.date}</p>}\r\n                </div>\r\n                {/* Time */}\r\n                {/* <div className='BookingDivs'>\r\n                    <label htmlFor=\"res-time\">Choose time</label>\r\n                    <select\r\n                      data-testid=\"res-time\"\r\n                      className={(formik.touched.time && formik.errors.time) ? \"ErrorBookingInput\" : \"BookingInput\" }\r\n                      id=\"res-time\"\r\n                      {...formik.getFieldProps(\"time\")}\r\n                    >\r\n                    {!formik.values.time && <option value=\"\" disabled hidden></option>}\r\n                    {availableTimeslots.length > 0 ? (\r\n                    availableTimeslots.map((time) => (\r\n                        <option key={time} value={time}>{time}</option>\r\n                    ))\r\n                    ) : (\r\n                        <option value=\"\" disabled>No available timeslots</option>\r\n                    )}\r\n                    </select>\r\n                    {formik.touched.time && formik.errors.time && <p className=\"ErrorDiv\">{formik.errors.time}</p>}\r\n                </div> */}\r\n                {/* Guests */}\r\n                {/* <div className='BookingDivs'>\r\n                    <label htmlFor=\"guests\">Number of guests</label>\r\n                    <input\r\n                      data-testid=\"guests\"\r\n                      className={(formik.touched.guests && formik.errors.guests) ? \"ErrorBookingInput\" : \"BookingInput\" } \r\n                      type=\"number\"\r\n                      placeholder=\"1\"\r\n                      min=\"1\"\r\n                      max=\"10\"\r\n                      id=\"guests\"\r\n                      {...formik.getFieldProps(\"guests\")} />\r\n                    {formik.touched.guests && formik.errors.guests && <p className=\"ErrorDiv\">{formik.errors.guests}</p>}\r\n                </div> */}\r\n                {/* Occasion */}\r\n                {/* <div  className='BookingDivs'>\r\n                    <label htmlFor=\"occasion\">Occasion</label>\r\n                    <select\r\n                      data-testid=\"occasion\"\r\n                      className={(formik.touched.occasion && formik.errors.occasion) ? \"ErrorBookingInput\" : \"BookingInput\" }\r\n                      id=\"occasion\"\r\n                      {...formik.getFieldProps(\"occasion\")}\r\n                    >\r\n                    {!formik.values.occasion && <option value=\"\" disabled hidden></option>}\r\n                      <option value=\"birthday\" className=\"opt\">Birthday</option>\r\n                      <option value=\"anniversary\" className=\"opt\">Anniversary</option>\r\n                    </select>\r\n                    {formik.touched.occasion && formik.errors.occasion && <p className=\"ErrorDiv\">{formik.errors.occasion}</p>}\r\n                </div> */}\r\n                {/* Submit Button */}\r\n                {bookingIsPending ?\r\n                  <input aria-label=\"On Click\" disabled className='CustomButton' type=\"submit\" value=\"loading\"/>\r\n                  :\r\n                  <input aria-label=\"On Click\" disabled={formik.errors.date || formik.errors.time || formik.errors.guests || formik.errors.occasion} className='CustomButton' type=\"submit\" value=\"Make Your reservation\"/>\r\n                }\r\n                { bookingError && <p className=\"ErrorDiv\">Something went wrong! Booking is not submitted.</p>}\r\n              </form>\r\n            </div>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}