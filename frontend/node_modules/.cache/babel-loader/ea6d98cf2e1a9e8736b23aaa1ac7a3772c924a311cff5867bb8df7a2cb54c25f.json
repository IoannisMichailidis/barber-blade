{"ast":null,"code":"// Communicate with the back-end Server\n\nimport { HAIRCUTS_URL, UPLOAD_URL } from \"../constants\";\nimport { apiSlice } from './apiSlice';\n\n// Inject endpoint to main apiSlice\nexport const haircutsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // ----------------------------------------------------------\n    // Public\n    // ----------------------------------------------------------\n    // Get all the products\n    getHaircuts: builder.query({\n      query: ({\n        pageNumber\n      }) => ({\n        // Search and Pagination functionality\n        url: HAIRCUTS_URL,\n        params: {\n          // keyword,\n          pageNumber\n        }\n      }),\n      providesTags: ['Haircuts'],\n      // instead of having to refresh the page or refetching the data using the refetch\n      keepUnusedDataFor: 5\n    }),\n    // Get category products (fedora | bowler | cowboy)\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // getCategoryProducts: builder.query({\n    //     query: ({category, pageNumber}) => ({ // Only Pagination functionality\n    //         url: `${HAIRCUTS_URL}/category/${category}`,\n    //         params: {\n    //              category,\n    //              pageNumber,\n    //         },\n    //     }),\n    //     keepUnusedDataFor: 5\n    // }),\n    // Get a single product\n    // getProductDetails: builder.query({\n    //     query: (productId) => ({\n    //         url: `${PRODUCTS_URL}/${productId}`,\n    //     }),\n    //     keepUnusedDataFor: 5\n    // }),\n    // Get top 3 products\n    // getTopProducts: builder.query({\n    //     query: () => ({\n    //         url: `${PRODUCTS_URL}/top`,\n    //     }),\n    //     keepUnusedDataFor: 5\n    // }),\n    // ----------------------------------------------------------\n    // Private\n    // ----------------------------------------------------------\n    // Create product review\n    // createReview: builder.mutation({\n    //     query: (data) => ({\n    //         url: `${PRODUCTS_URL}/${data.productId}/reviews`,\n    //         method: 'POST',\n    //         body: data\n    //     }),\n    //     invalidatesTags: ['Product'], // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\n    // }),\n    // ----------------------------------------------------------\n    // ADMIN\n    // ----------------------------------------------------------\n    // Create a product\n    createHaircut: builder.mutation({\n      query: () => ({\n        // Even if it is a post request, we don't pass any data because we create it with sample data directly in the backend endpoint and later on we will edit it\n        url: HAIRCUTS_URL,\n        method: 'POST'\n      }),\n      invalidatesTags: ['Haircut'] // it is stopped from beeing cached. So we have fresh data. We get read of any cached data\n    }),\n    // // Update a product\n    // updateProduct: builder.mutation({\n    //     query: (data) => ({\n    //         url: `${PRODUCTS_URL}/${data._id}`,\n    //         method: 'PUT',\n    //         body: data,\n    //     }),\n    //     invalidatesTags: ['Products'],   // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\n    // }),\n    // Upload product Image\n    uploadHaircutImage: builder.mutation({\n      query: data => ({\n        url: UPLOAD_URL,\n        method: 'POST',\n        body: data\n      })\n    }),\n    // Delete product\n    deleteHaircut: builder.mutation({\n      query: productId => ({\n        url: `${HAIRCUTS_URL}/${productId}`,\n        method: 'DELETE'\n      })\n    })\n  })\n});\nexport const {\n  useGetHaircutsQuery,\n  // useGetProductDetailsQuery,\n  useCreateHaircutMutation,\n  // useUpdateProductMutation,\n  useUploadHaircutImageMutation,\n  useDeleteHaircutMutation\n  // useCreateReviewMutation,\n  // useGetTopProductsQuery,\n  // useGetCategoryProductsQuery //!!!!!\n} = haircutsApiSlice;","map":{"version":3,"names":["HAIRCUTS_URL","UPLOAD_URL","apiSlice","haircutsApiSlice","injectEndpoints","endpoints","builder","getHaircuts","query","pageNumber","url","params","providesTags","keepUnusedDataFor","createHaircut","mutation","method","invalidatesTags","uploadHaircutImage","data","body","deleteHaircut","productId","useGetHaircutsQuery","useCreateHaircutMutation","useUploadHaircutImageMutation","useDeleteHaircutMutation"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/slices/haircutsApiSlice.js"],"sourcesContent":["// Communicate with the back-end Server\r\n\r\nimport { HAIRCUTS_URL, UPLOAD_URL } from \"../constants\";\r\nimport { apiSlice } from './apiSlice';\r\n\r\n// Inject endpoint to main apiSlice\r\nexport const haircutsApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        // ----------------------------------------------------------\r\n        // Public\r\n        // ----------------------------------------------------------\r\n        // Get all the products\r\n        getHaircuts: builder.query({\r\n            query: ({ pageNumber}) => ({  // Search and Pagination functionality\r\n                url: HAIRCUTS_URL,\r\n                params: {\r\n                    // keyword,\r\n                    pageNumber,\r\n                },\r\n            }),\r\n            providesTags: ['Haircuts'], // instead of having to refresh the page or refetching the data using the refetch\r\n            keepUnusedDataFor: 5\r\n        }),\r\n        // Get category products (fedora | bowler | cowboy)\r\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n        // getCategoryProducts: builder.query({\r\n        //     query: ({category, pageNumber}) => ({ // Only Pagination functionality\r\n        //         url: `${HAIRCUTS_URL}/category/${category}`,\r\n        //         params: {\r\n        //              category,\r\n        //              pageNumber,\r\n        //         },\r\n        //     }),\r\n        //     keepUnusedDataFor: 5\r\n        // }),\r\n        // Get a single product\r\n        // getProductDetails: builder.query({\r\n        //     query: (productId) => ({\r\n        //         url: `${PRODUCTS_URL}/${productId}`,\r\n        //     }),\r\n        //     keepUnusedDataFor: 5\r\n        // }),\r\n        // Get top 3 products\r\n        // getTopProducts: builder.query({\r\n        //     query: () => ({\r\n        //         url: `${PRODUCTS_URL}/top`,\r\n        //     }),\r\n        //     keepUnusedDataFor: 5\r\n        // }),\r\n        // ----------------------------------------------------------\r\n        // Private\r\n        // ----------------------------------------------------------\r\n        // Create product review\r\n        // createReview: builder.mutation({\r\n        //     query: (data) => ({\r\n        //         url: `${PRODUCTS_URL}/${data.productId}/reviews`,\r\n        //         method: 'POST',\r\n        //         body: data\r\n        //     }),\r\n        //     invalidatesTags: ['Product'], // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\r\n        // }),\r\n        // ----------------------------------------------------------\r\n        // ADMIN\r\n        // ----------------------------------------------------------\r\n        // Create a product\r\n        createHaircut: builder.mutation({\r\n            query: () => ({                 // Even if it is a post request, we don't pass any data because we create it with sample data directly in the backend endpoint and later on we will edit it\r\n                url: HAIRCUTS_URL,\r\n                method: 'POST'\r\n            }),\r\n            invalidatesTags: ['Haircut'],   // it is stopped from beeing cached. So we have fresh data. We get read of any cached data\r\n        }),\r\n        // // Update a product\r\n        // updateProduct: builder.mutation({\r\n        //     query: (data) => ({\r\n        //         url: `${PRODUCTS_URL}/${data._id}`,\r\n        //         method: 'PUT',\r\n        //         body: data,\r\n        //     }),\r\n        //     invalidatesTags: ['Products'],   // it is stopped from beeing cached. So we have fresh data or we clear the cache. We get read of any cached data\r\n        // }),\r\n        // Upload product Image\r\n        uploadHaircutImage: builder.mutation({\r\n            query: (data) => ({\r\n                url: UPLOAD_URL,\r\n                method: 'POST',\r\n                body: data\r\n            })\r\n        }),\r\n        // Delete product\r\n        deleteHaircut: builder.mutation({\r\n            query: (productId) => ({\r\n                url: `${HAIRCUTS_URL}/${productId}`,\r\n                method: 'DELETE'\r\n            })\r\n        }),\r\n    }),\r\n});\r\n\r\nexport const {\r\n    useGetHaircutsQuery,\r\n    // useGetProductDetailsQuery,\r\n    useCreateHaircutMutation,\r\n    // useUpdateProductMutation,\r\n    useUploadHaircutImageMutation,\r\n    useDeleteHaircutMutation,\r\n    // useCreateReviewMutation,\r\n    // useGetTopProductsQuery,\r\n    // useGetCategoryProductsQuery //!!!!!\r\n} = haircutsApiSlice;\r\n"],"mappings":"AAAA;;AAEA,SAASA,YAAY,EAAEC,UAAU,QAAQ,cAAc;AACvD,SAASC,QAAQ,QAAQ,YAAY;;AAErC;AACA,OAAO,MAAMC,gBAAgB,GAAGD,QAAQ,CAACE,eAAe,CAAC;EACrDC,SAAS,EAAGC,OAAO,KAAM;IACrB;IACA;IACA;IACA;IACAC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;MACvBA,KAAK,EAAEA,CAAC;QAAEC;MAAU,CAAC,MAAM;QAAG;QAC1BC,GAAG,EAAEV,YAAY;QACjBW,MAAM,EAAE;UACJ;UACAF;QACJ;MACJ,CAAC,CAAC;MACFG,YAAY,EAAE,CAAC,UAAU,CAAC;MAAE;MAC5BC,iBAAiB,EAAE;IACvB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,aAAa,EAAER,OAAO,CAACS,QAAQ,CAAC;MAC5BP,KAAK,EAAEA,CAAA,MAAO;QAAkB;QAC5BE,GAAG,EAAEV,YAAY;QACjBgB,MAAM,EAAE;MACZ,CAAC,CAAC;MACFC,eAAe,EAAE,CAAC,SAAS,CAAC,CAAI;IACpC,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,kBAAkB,EAAEZ,OAAO,CAACS,QAAQ,CAAC;MACjCP,KAAK,EAAGW,IAAI,KAAM;QACdT,GAAG,EAAET,UAAU;QACfe,MAAM,EAAE,MAAM;QACdI,IAAI,EAAED;MACV,CAAC;IACL,CAAC,CAAC;IACF;IACAE,aAAa,EAAEf,OAAO,CAACS,QAAQ,CAAC;MAC5BP,KAAK,EAAGc,SAAS,KAAM;QACnBZ,GAAG,EAAG,GAAEV,YAAa,IAAGsB,SAAU,EAAC;QACnCN,MAAM,EAAE;MACZ,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTO,mBAAmB;EACnB;EACAC,wBAAwB;EACxB;EACAC,6BAA6B;EAC7BC;EACA;EACA;EACA;AACJ,CAAC,GAAGvB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}