{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\Portofolio\\\\barber-shop\\\\frontend\\\\src\\\\screens\\\\book\\\\ChooseBarberScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n// Components\nimport FormContainer from '../../components/common/FormContainer';\nimport BookingSteps from '../../components/booking/BookingSteps';\nimport Loader from '../../components/common/Loader';\nimport Message from '../../components/common/Message';\n// Slices\nimport { useGetBarbersQuery } from '../../slices/usersApiSlice';\n// import { saveShippingAddress } from '../../slices/cartSlice';\nimport { saveBarber } from '../../slices/bookingSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChooseBarberScreen() {\n  _s();\n  var _error$data;\n  // Api Slice: Get the barbers\n  const {\n    data: barbers,\n    isLoading,\n    error\n  } = useGetBarbersQuery();\n  console.log(barbers);\n  // Get the barber global state\n  // const booking = useSelector((state) => state.booking);\n  // const { barber } = booking;\n\n  // Populate the component local state based on the results of the global state if any\n  // const [address, setAddress] = useState(shippingAddress?.address || '');\n  // const [city, setCity] = useState(shippingAddress?.city || '');\n  // const [postalCode, setPostalCode] = useState(shippingAddress?.postalCode || '');\n  // const [country, setCountry] = useState(shippingAddress?.country || '');\n\n  // const [barberName, setBarberName] = useState(barber?.username || '')\n  const [selectedBarber, setSelectedBarber] = useState(null);\n\n  // const isFormFilled = address && city && postalCode && country;\n\n  // Initialization\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const submitHandler = e => {\n    e.preventDefault();\n    // Update the global state\n    dispatch(saveBarber({\n      selectedBarber\n    }));\n    // navigate('/booking-datetime');\n  };\n  const handleBarberSelect = barberId => {\n    setSelectedBarber(barberId);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: (error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.message) || error.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(FormContainer, {\n        children: [/*#__PURE__*/_jsxDEV(BookingSteps, {\n          step1: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Select Barber\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: submitHandler,\n          className: \"justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"barber\",\n            className: \"my-2 d-flex justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: barbers && barbers.map(barber => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-6 \",\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  onClick: () => handleBarberSelect(barber.id),\n                  className: selectedBarber === barber.id ? 'selected-card my-3 p-3 rounded' : 'my-3 p-3 rounded',\n                  children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                    src: barber.image,\n                    variant: \"top\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                      as: \"div\",\n                      className: \"card-title\",\n                      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: barber.username\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 73,\n                        columnNumber: 81\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 73,\n                      columnNumber: 37\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: `barber-${barber.id}`,\n                      label: \"\",\n                      checked: selectedBarber === barber.id,\n                      onChange: () => handleBarberSelect(barber.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 74,\n                      columnNumber: 37\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 29\n                }, this)\n              }, barber.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            className: \"my-2\"\n            // disabled={!isFormFilled}\n            ,\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n}\n_s(ChooseBarberScreen, \"fOM7bdB5f96BK/e5hQTnfOJTdbs=\", false, function () {\n  return [useGetBarbersQuery, useNavigate, useDispatch];\n});\n_c = ChooseBarberScreen;\nexport default ChooseBarberScreen;\nvar _c;\n$RefreshReg$(_c, \"ChooseBarberScreen\");","map":{"version":3,"names":["React","useState","Form","Button","Card","useDispatch","useSelector","useNavigate","FormContainer","BookingSteps","Loader","Message","useGetBarbersQuery","saveBarber","jsxDEV","_jsxDEV","Fragment","_Fragment","ChooseBarberScreen","_s","_error$data","data","barbers","isLoading","error","console","log","selectedBarber","setSelectedBarber","navigate","dispatch","submitHandler","e","preventDefault","handleBarberSelect","barberId","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","message","step1","onSubmit","className","Group","controlId","map","barber","onClick","id","Img","src","image","Body","Title","as","username","Check","type","label","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/micha/Documents/Portofolio/barber-shop/frontend/src/screens/book/ChooseBarberScreen.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button, Card } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n// Components\r\nimport FormContainer from '../../components/common/FormContainer';\r\nimport BookingSteps from '../../components/booking/BookingSteps';\r\nimport Loader from '../../components/common/Loader';\r\nimport Message from '../../components/common/Message';\r\n// Slices\r\nimport { useGetBarbersQuery } from '../../slices/usersApiSlice';\r\n// import { saveShippingAddress } from '../../slices/cartSlice';\r\nimport { saveBarber } from '../../slices/bookingSlice';\r\n\r\nfunction ChooseBarberScreen() {\r\n    // Api Slice: Get the barbers\r\n    const { data: barbers, isLoading, error} = useGetBarbersQuery();\r\n    console.log(barbers)\r\n    // Get the barber global state\r\n    // const booking = useSelector((state) => state.booking);\r\n    // const { barber } = booking;\r\n\r\n    // Populate the component local state based on the results of the global state if any\r\n    // const [address, setAddress] = useState(shippingAddress?.address || '');\r\n    // const [city, setCity] = useState(shippingAddress?.city || '');\r\n    // const [postalCode, setPostalCode] = useState(shippingAddress?.postalCode || '');\r\n    // const [country, setCountry] = useState(shippingAddress?.country || '');\r\n\r\n    // const [barberName, setBarberName] = useState(barber?.username || '')\r\n    const [selectedBarber, setSelectedBarber] = useState(null);\r\n\r\n    // const isFormFilled = address && city && postalCode && country;\r\n\r\n    // Initialization\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        // Update the global state\r\n        dispatch(saveBarber({selectedBarber}));\r\n        // navigate('/booking-datetime');\r\n    }\r\n\r\n      const handleBarberSelect = (barberId) => {\r\n        setSelectedBarber(barberId);\r\n      };\r\n\r\n  return (\r\n<>\r\n{ isLoading ? (\r\n      <Loader/>\r\n    ) : error ? (\r\n      <Message variant='danger'>{ error?.data?.message || error.error }</Message>\r\n    ) : (\r\n    <>\r\n    <FormContainer>\r\n        <BookingSteps step1 />\r\n        <h1>Select Barber</h1>\r\n        <Form onSubmit={submitHandler} className='justify-content-center'>\r\n            {/* Barber */}\r\n            {/* <div className=\"row\"> */}\r\n            <Form.Group controlId='barber' className='my-2 d-flex justify-content-center'>\r\n                <div className=\"row\">\r\n                    { barbers && barbers.map((barber) => (\r\n                        <div key={barber.id} className=\"col-md-6 \">\r\n                            <Card\r\n                            onClick={() => handleBarberSelect(barber.id)}\r\n                            className={selectedBarber === barber.id ? 'selected-card my-3 p-3 rounded' : 'my-3 p-3 rounded'}\r\n                            >\r\n                                <Card.Img src={barber.image} variant='top' />\r\n                                <Card.Body>\r\n                                    <Card.Title as='div' className='card-title'><strong>{barber.username}</strong></Card.Title>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        id={`barber-${barber.id}`}\r\n                                        label=''\r\n                                        checked={selectedBarber === barber.id}\r\n                                        onChange={() => handleBarberSelect(barber.id)}\r\n                                    />\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                ))}\r\n                </div>\r\n            {/* </div> */}\r\n            </Form.Group>\r\n\r\n\r\n            {/* Country */}\r\n            {/* <Form.Group controlId='country' className='my-2'>\r\n                <Form.Label>Country:</Form.Label>\r\n                <Form.Control\r\n                    type='text'\r\n                    placeholder='Insert country'\r\n                    value={country}\r\n                    onChange={(e) => setCountry(e.target.value)}\r\n                >\r\n                </Form.Control>\r\n            </Form.Group> */}\r\n            {/* Submit Button */}\r\n            <Button\r\n                type='submit'\r\n                variant='primary'\r\n                className='my-2'\r\n                // disabled={!isFormFilled}\r\n            >\r\n                Continue\r\n            </Button>\r\n        </Form>\r\n    </FormContainer>\r\n    </>\r\n        ) }\r\n</>\r\n  )\r\n}\r\n\r\nexport default ChooseBarberScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}